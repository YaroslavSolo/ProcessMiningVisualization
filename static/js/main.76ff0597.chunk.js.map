{"version":3,"sources":["images/one-token.svg","images/two-tokens.svg","images/three-tokens.svg","images/four-tokens.svg","images/five-tokens.svg","images/six-tokens.svg","images/seven-tokens.svg","images/eight-tokens.svg","images/nine-tokens.svg","actions/index.js","selectors/index.js","constants/nodeTypes.js","components/Toolbar.js","components/EditorToolbar.js","components/EdgeForm.js","containers/EdgeFormContainer.js","components/PlaceForm.js","selectors/petriNet.js","containers/PlaceFormContainer.js","components/TransitionForm.js","containers/TransitionFormContainer.js","components/ElementForm.js","constants/elementTypes.js","components/Delayed.js","components/GraphArea.js","utils/ElementCfgFactory.js","utils/PetriNetToElementCfgsMapper.js","contexts/CytoscapeContext.js","components/EdgeHandles.js","utils/changeDetector.js","components/StaticDiv.js","components/Graph.js","components/PetriNetGraphStyle.js","components/PetriNetGraph.js","components/Editor.js","containers/EditorContainer.js","animations/TokenFlowAnimation.js","utils/bezierCurve.js","animations/BezierCurveTokenFlowAnimation.js","animations/LinearTokenFlowAnimation.js","animations/TokenFlowAnimationFactory.js","animations/TransitionAnimation.js","components/GraphAnimation.js","constants/speedTypes.js","components/SimulatorToolbar.js","components/Logo.js","utils/initialState.js","components/Simulator.js","containers/SimulatorContainer.js","components/CreateBox.js","containers/CreateBoxContainer.js","components/PetriNetMenu.js","components/TraceItem.js","containers/PetriNetMenuContainer.js","components/CaseTracesList.js","containers/CaseTracesListContainer.js","components/Sidebar.js","components/ModeMenu.js","components/Topbar.js","components/App.js","reducers/petriNets.js","reducers/edgesById.js","reducers/nodesById.js","reducers/markings.js","reducers/petriNet.js","reducers/petriNetsById.js","reducers/index.js","initialState.js","index.js"],"names":["module","exports","__webpack_require__","p","removeNode","petriNetId","nodeId","type","setLabel","label","getCurrentPetriNet","state","props","getPetriNet","getCurrentPetriNetId","match","params","id","petriNetsById","TRANSITION","Header","Layout","Toolbar","react_default","a","createElement","className","style","backgroundColor","this","children","Component","EditorToolbar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","onNodeTypeChange","target","value","bind","assertThisInitialized","activeNodeType","components_Toolbar","es_radio","Group","onChange","buttonStyle","Button","nodeType","es_button","icon","onClick","onClear","EdgeForm","Fragment","es_form","layout","Item","input_number","min","weight","onWeightChange","block","onDelete","withRouter","connect","ownProps","edgesById","edgeId","dispatch","setWeight","PlaceForm","newValue","RegExp","test","setState","number","onNumberOfTokensChange","handleLabelChange","onLabelChange","input","placeholder","numberOfTokens","getIncomingEdges","values","filter","edge","to","getOutgoingEdges","from","getNumberOfTokens","placeId","markings","length","getNumMissingTokens","net","transitionId","edges","numTokens","numRequired","forEach","getActiveTransitions","nodesById","node","nodeTypes","transition","some","place","undefined","capacityLimit","canTakeTokens","getNumNetTokens","reduce","w1","w2","getNumConsumedTokens","map","e","getNumProducedTokens","getTransitionByLabel","petriNet","onCapacityLimitChange","capacity","removeCapacityLimit","setCapacityLimit","getCapacityLimitChangeAction","setInitialNumberOfTokens","TransitionForm","color","EditorSidebar","elementType","renderEdgeForm","renderNodeForm","EdgeFormContainer","element","renderPlaceForm","renderTransitionForm","PlaceFormContainer","TransitionFormContainer","Delayed","display","_this2","setTimeout","Content","GraphArea","components_Delayed","ElementCfgFactory","cacheOptions","primitive","max","_edgeCfg","memoizee","_nodeCfg","source","selected","selectable","grabbable","group","data","_ref","_ref$weight","_ref$selected","_ref$selectable","_ref$grabbable","x","y","classes","position","_ref2","_ref2$position","_ref2$selected","_ref2$selectable","_ref2$grabbable","elementByIdReducer","obj","PetriNetToElementCfgsMapper","factory","selectedId","_ref$highlightedIds","highlightedIds","_ref$locked","locked","isHighlighted","indexOf","isSelected","nodeCfgsById","nodeCfg","nodeLabel","parts","push","concat","join","nodeNumberOfTokens","edgeCfg","objectSpread","edgeCfgsById","nodeClasses","CytoscapeContext","React","createContext","cytoscape","use","edgehandles","EdgeHandles","componentDidMount","initEdgeHandles","componentDidUpdate","edgeParams","edgeType","handleComplete","sourceNode","targetNode","shouldAddEdge","onAddEdge","context","destroy","complete","snap","same","handleNode","PureComponent","contextType","keyToValueMapper","callback","key","compareByValue","prev","current","onAdd","onRemove","onRemain","added","val","removed","subsisted","changeDetector","keys","StaticDiv","_this$props","divRef","rest","objectWithoutProperties","assign","ref","Graph","handleClick","cy","callCallback","onClickOnElement","onClickOnBackground","handleFree","hasNodeMoved","onMove","handleGrab","select","handleSelect","onSelect","handleUnselect","onUnselect","cyContainerRef","createRef","add","cloneDeep","_len","arguments","args","Array","_key","apply","initCytoscape","setLoaded","updateCytoscape","elements","first","Error","loadedPosition","loaded","elementsById","container","maxZoom","on","findElement","remove","components_StaticDiv","contexts_CytoscapeContext","Provider","updateElements","updateOptions","json","updateElement","addElement","removeElement","_this3","updateOption","fontFamily","cachedImages","getImageWithNumber","svg","encodeURIComponent","generateImageWithNumber","tokenImages","oneToken","twoTokens","threeTokens","fourTokens","fiveTokens","sixTokens","sevenTokens","eightTokens","nineTokens","PetriNetGraphStyle","selector","font-size","font-family","border-color","border-width","text-valign","text-halign","text-margin-y","background-color","background-fit","height","width","background-image","getBackgroundImageOfPlace","shape","target-arrow-shape","line-color","target-arrow-color","curve-style","opacity","PetriNetGraph","render","components_Graph","petriNetGraphStyle","renderEdgeHandles","elementCfgFactory","name","fromNode","toNode","components_EdgeHandles","Sider","Editor","clearPetriNet","handleAddEdge","handleClickOnBackground","handleNodeTypeChange","uuidv4","onAddNode","components_EditorToolbar","components_GraphArea","components_PetriNetGraph","renderSidebar","getSelectedElement","ElementForm","addEdge","addNode","moveNode","TokenFlowAnimation","edgeElement","speed","token","addToken","animateToken","removeToken","sourceEndpoint","valueAt","p0","p1","p2","t","bezierCurve","BezierCurveTokenFlowAnimation","controlPoints","targetEndpoint","durationOfStep","i","numberOfSteps","animate","pointOnBezierCurve","duration","animation","queue","play","promise","LinearTokenFlowAnimation","TokenFlowAnimationFactory","isBezierCurve","TransitionAnimation","transitionElement","canceled","animateTokenFlowOfEdge","Promise","resolve","promises","incomers","animateIncomingEdge","all","outgoers","animateOutgoingEdge","animateIncomingEdges","animateOutgoingEdges","GraphAnimation","elementId","onEnd","cancel","SLOW","FAST","SimulatorToolbar","onSpeedChange","speedType","onRun","onRunStep","onPause","onReset","Logo","simulatorInitialState","fitness","isRunning","traceIdx","pos","produced","consumed","missing","remaining","curProduced","curConsumed","curMissing","curRemaining","Simulator","validatePetriNet","validateTransitionNames","transitionNames","Set","transitions","trans","namesFromTraces","traces","trace","split","b","size","toConsumableArray","every","has","changeSpeed","newSpeed","animationSpeed","waitTime","onMissingToken","asyncToGenerator","regenerator_default","mark","_callee","_this$state","wrap","_context","next","console","log","onAddTokens","stop","isFinished","updateUiTokens","currentTrace","_this$state2","_this$state3","updateTransitionTokens","updateState","_this$state4","reset","onAlgorithmFinished","_this$state5","Number","toFixed","Notify","success","onNextTrace","_callee2","_context2","active","JSON","parse","stringify","tryRunStep","isStepReady","runStep","validateBeforeRun","failure","_callee3","_this$state6","activeTransitions","_context3","abrupt","handleClickOnElement","run","_callee4","_context4","wait","pause","info","_callee5","_context5","renderResult","components_Logo","renderCurrentTraceInfo","tr","handleAnimationEnd","onFireTransition","isTransitionActive","activeTransitionIds","time","sleep","ms","r","components_SimulatorToolbar","renderAnimation","layout_Sider","components_GraphAnimation","fireTransition","addTokens","CreateBox","handleClickOnPlus","onCreate","button","suffix","action","addPetriNet","history","PetriNetMenu","item","petriNets","menu","theme","selectedKeys","TraceItem","getPetriNets","_","onNumberChange","onLostFocus","_this$props$trace","onDeletion","required","onBlur","CaseTracesList","traceId","createTrace","traceStr","text","addItem","res","deleteItem","index","findIndex","el","slice","changeNumber","targetTrace","onSubmit","preventDefault","items","other","background","components_TraceItem","pattern","Sidebar","Sidebar_Sider","CaseTracesListContainer","ModeMenu","mode","selectedMode","Topbar","Topbar_Header","components_ModeMenu","App","components_Sidebar","components_Topbar","Route","path","component","EditorContainer","SimulatorContainer","initialState","defineProperty","marking","mapped","nextMarking","petriNetsByIds","petriNetState","reducedState","combineReducers","examplePetriNetId","src_initialState","store","createStore","rootReducer","inititalState","ReactDOM","es","HashRouter","Switch","Redirect","getState","document","getElementById"],"mappings":"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","file":"static/js/main.76ff0597.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/one-token.a3314b8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/two-tokens.8a98c32b.svg\";","module.exports = __webpack_public_path__ + \"static/media/three-tokens.0ebc35c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/four-tokens.da8b9d75.svg\";","module.exports = __webpack_public_path__ + \"static/media/five-tokens.7240809b.svg\";","module.exports = __webpack_public_path__ + \"static/media/six-tokens.9b88cbc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-tokens.d7817d9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight-tokens.a52db80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine-tokens.e2e95f09.svg\";","import uuidv4 from 'uuid/v4';\n\nexport const ADD_PETRI_NET = 'ADD_PETRI_NET';\nexport const ADD_EDGE = 'ADD_EDGE';\nexport const SET_WEIGHT = 'SET_WEIGHT';\nexport const REMOVE_EDGE = 'REMOVE_EDGE';\nexport const ADD_NODE = 'ADD_NODE';\nexport const MOVE_NODE = 'MOVE_NODE';\nexport const REMOVE_NODE = 'REMOVE_NODE';\nexport const SET_LABEL = 'SET_LABEL';\nexport const SET_CAPACITY_LIMIT = 'SET_CAPACITY_LIMIT';\nexport const REMOVE_CAPACITY_LIMIT = 'REMOVE_CAPACITY_LIMIT';\nexport const SET_INITIAL_NUMBER_OF_TOKENS = 'SET_INITIAL_NUMBER_OF_TOKENS';\nexport const RESET_MARKINGS = 'RESET_MARKINGS';\nexport const FIRE_TRANSITION = 'FIRE_TRANSITIONS';\nexport const ADD_TOKENS = 'ADD_TOKENS';\n\nexport const addPetriNet = name => ({\n    type: ADD_PETRI_NET,\n    petriNetId: uuidv4(),\n    name,\n});\n\nexport const addEdge = (petriNetId, from, to) => ({\n    type: ADD_EDGE,\n    petriNetId,\n    edgeId: `${from}_${to}`,\n    from,\n    to,\n});\n\nexport const setWeight = (petriNetId, edgeId, weight) => ({\n    type: SET_WEIGHT,\n    petriNetId,\n    edgeId,\n    weight,\n});\n\nexport const removeEdge = (petriNetId, edgeId) => ({\n    type: REMOVE_EDGE,\n    petriNetId,\n    edgeId,\n});\n\nexport const addNode = (petriNetId, nodeId, nodeType, position) => ({\n    type: ADD_NODE,\n    petriNetId,\n    nodeId,\n    nodeType,\n    position,\n});\n\nexport const moveNode = (petriNetId, nodeId, position) => ({\n    type: MOVE_NODE,\n    petriNetId,\n    nodeId,\n    position,\n});\n\nexport const removeNode = (petriNetId, nodeId) => ({\n    type: REMOVE_NODE,\n    petriNetId,\n    nodeId,\n});\n\nexport const setLabel = (petriNetId, nodeId, label) => ({\n    type: SET_LABEL,\n    petriNetId,\n    nodeId,\n    label,\n});\n\nexport const setCapacityLimit = (petriNetId, placeId, capacityLimit) => ({\n    type: SET_CAPACITY_LIMIT,\n    petriNetId,\n    placeId,\n    capacityLimit,\n});\n\nexport const removeCapacityLimit = (petriNetId, placeId) => ({\n    type: REMOVE_CAPACITY_LIMIT,\n    petriNetId,\n    placeId,\n});\n\nexport const setInitialNumberOfTokens = (petriNetId, placeId, numberOfTokens) => ({\n    type: SET_INITIAL_NUMBER_OF_TOKENS,\n    petriNetId,\n    placeId,\n    numberOfTokens,\n});\n\nexport const resetMarkings = (petriNetId) => ({\n    type: RESET_MARKINGS,\n    petriNetId,\n});\n\nexport const fireTransition = (petriNetId, transitionId) => ({\n    type: FIRE_TRANSITION,\n    petriNetId,\n    transitionId,\n});\n\nexport const addTokens = (petriNetId, transitionId) => ({\n    type: ADD_TOKENS,\n    petriNetId,\n    transitionId,\n});\n","export const getCurrentPetriNet = (state, props) => (\n    getPetriNet(state, getCurrentPetriNetId(props))\n);\n\nexport const getCurrentPetriNetId = (props) => (\n    props.match.params.id\n);\n\nexport const getPetriNet = (state, id) => (\n    state.petriNetsById[id]\n);\n\nexport const getPetriNets = (state) => (\n    state.petriNets.map(id => state.petriNetsById[id])\n);\n","export const PLACE = 'place';\nexport const TRANSITION = 'transition';\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport './css/Toolbar.css';\n\nconst {Header} = Layout;\n\nclass Toolbar extends Component {\n    render() {\n        return (\n            <Header className=\"toolbar\" style={{backgroundColor: this.props.backgroundColor}}>\n                {this.props.children}\n            </Header>\n        )\n    }\n}\n\nexport default Toolbar;\n","import React, {Component} from 'react';\nimport {Button, Radio} from 'antd';\nimport * as nodeType from '../constants/nodeTypes';\nimport Toolbar from './Toolbar';\nimport './css/HorizontalToolbar.css';\n\nclass EditorToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange = (event) => {\n        this.props.onNodeTypeChange(event.target.value);\n    }\n\n    render() {\n        let activeNodeType = this.props.activeNodeType;\n        return (\n            <Toolbar backgroundColor=\"#008B27\">\n                <Radio.Group value={activeNodeType} onChange={this.handleChange} buttonStyle=\"solid\">\n                    <Radio.Button value={nodeType.TRANSITION}>\n                        Transition\n                    </Radio.Button>\n                    <Radio.Button value={nodeType.PLACE}>\n                        Place\n                    </Radio.Button>\n                </Radio.Group>\n                <Button id=\"clear\" icon=\"delete\" className=\"btn-margin\" onClick={this.props.onClear}>Clear</Button>\n            </Toolbar>\n        )\n    }\n}\n\nexport default EditorToolbar;\n","import React, {Component} from 'react';\nimport {Button, Form, InputNumber} from 'antd';\n\nclass EdgeForm extends Component {\n    render() {\n        return (\n            <>\n                <h2>Edge</h2>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"Weight\">\n                        <InputNumber id=\"weight\"\n                                     min={1}\n                                     value={this.props.weight}\n                                     onChange={this.props.onWeightChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default EdgeForm;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {setWeight, removeEdge} from '../actions';\nimport {getCurrentPetriNetId} from '../selectors';\nimport EdgeForm from '../components/EdgeForm';\n\nconst mapStateToProps = (state, ownProps) => {\n    const edge = state.petriNetsById[getCurrentPetriNetId(ownProps)].edgesById[ownProps.edgeId]\n    return {\n        weight: edge.weight,\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onWeightChange: weight => (\n        dispatch(setWeight(getCurrentPetriNetId(ownProps), ownProps.edgeId, weight))\n    ),\n    onDelete: () => (\n        dispatch(removeEdge(getCurrentPetriNetId(ownProps), ownProps.edgeId))\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EdgeForm));\n","import React, {Component} from 'react';\nimport {Button, Form, Input, InputNumber} from 'antd';\n\nclass PlaceForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleLabelChange = this.handleLabelChange.bind(this);\n    }\n\n    handleLabelChange(event) {\n        this.props.onLabelChange(event.target.value);\n    }\n\n    onChange = (newValue) => {\n        const regexp = new RegExp(\"^[1-9]?[0-9]{0,3}$\");\n\n        if (regexp.test(newValue)) {\n            this.setState({number: newValue});\n            this.props.onNumberOfTokensChange(newValue);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Place</h2>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"\">\n                        <Input id=\"label\" placeholder=\"Enter name\"\n                               value={this.props.label}\n                               onChange={this.handleLabelChange}/>\n                    </Form.Item>\n                    <Form.Item label=\"Initial number of tokens\">\n                        <InputNumber id=\"numberOfTokens\"\n                                     min={0}\n                                     value={this.props.numberOfTokens}\n                                     onChange={this.onChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default PlaceForm;\n","import * as nodeTypes from '../constants/nodeTypes';\n\nexport const getIncomingEdges = (state, nodeId) => (\n    Object.values(state.edgesById).filter(edge => edge.to === nodeId)\n);\n\nexport const getOutgoingEdges = (state, nodeId) => (\n    Object.values(state.edgesById).filter(edge => edge.from === nodeId)\n);\n\nexport const getNumberOfTokens = (state, placeId) => (\n    state.markings[state.markings.length - 1][placeId]\n);\n\nconst canTakeTokens = (state, placeId, numberOfTokens) => {\n    const place = state.nodesById[placeId];\n    if (place.capacityLimit === undefined) {\n        return true;\n    }\n    const leftCapacity = place.capacityLimit - getNumberOfTokens(state, placeId);\n    return leftCapacity >= numberOfTokens;\n};\n\nexport const getNumMissingTokens = (net, transitionId) => {\n    const edges = getIncomingEdges(net, transitionId);\n    let numTokens = 0;\n    let numRequired = 0;\n    edges.forEach(edge => {\n        numTokens += getNumberOfTokens(net, edge.from);\n        numRequired += edge.weight;\n    });\n\n    return numRequired - numTokens;\n}\n\nexport const getActiveTransitions = (state) => {\n    const all = Object.values(state.nodesById)\n        .filter(node => node.type === nodeTypes.TRANSITION);\n\n    return all.filter(transition => {\n        const incoming = getIncomingEdges(state, transition.id);\n        if (incoming.some((edge) => edge.weight > getNumberOfTokens(state, edge.from))) {\n            return false;\n        }\n\n        let outgoing = getOutgoingEdges(state, transition.id);\n        return !outgoing.some((edge) => !canTakeTokens(state, edge.to, edge.weight));\n    });\n};\n\nexport const getNumNetTokens = (net) => {\n    return Object.values(net.markings[net.markings.length - 1]).reduce((w1, w2) => w1 + w2);\n};\n\nexport const getNumConsumedTokens = (net, transitionId) => {\n    return getIncomingEdges(net, transitionId).map(e => e.weight).reduce((w1, w2) => w1 + w2);\n};\n\nexport const getNumProducedTokens = (net, transitionId) => {\n    return getOutgoingEdges(net, transitionId).map(e => e.weight).reduce((w1, w2) => w1 + w2);\n};\n\nexport const getTransitionByLabel = (net, label) => {\n    return Object.values(net.nodesById)\n        .filter(node => node.type === nodeTypes.TRANSITION && node.label === label)[0];\n}\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {\n    removeNode, setLabel,\n    setCapacityLimit, removeCapacityLimit, setInitialNumberOfTokens\n} from '../actions';\nimport PlaceForm from '../components/PlaceForm';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors/index';\nimport {getNumberOfTokens} from '../selectors/petriNet';\n\nconst mapStateToProps = (state, ownProps) => {\n    const petriNet = getCurrentPetriNet(state, ownProps);\n    const place = petriNet.nodesById[ownProps.placeId]\n    return {\n        label: place.label,\n        capacityLimit: place.capacityLimit,\n        numberOfTokens: getNumberOfTokens(petriNet, ownProps.placeId),\n    };\n};\n\nconst getCapacityLimitChangeAction = (props, capacity) => {\n    const petriNetId = getCurrentPetriNetId(props);\n    if (capacity === undefined || capacity === null || capacity === '') {\n        return removeCapacityLimit(\n            petriNetId,\n            props.placeId\n        );\n    } else {\n        return setCapacityLimit(\n            petriNetId,\n            props.placeId,\n            capacity\n        );\n    }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onLabelChange: label => (\n        dispatch(\n            setLabel(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId,\n                label\n            )\n        )\n    ),\n    onCapacityLimitChange: capacity => (\n        dispatch(\n            getCapacityLimitChangeAction(\n                ownProps,\n                capacity\n            )\n        )\n    ),\n    onNumberOfTokensChange: numberOfTokens => (\n        dispatch(\n            setInitialNumberOfTokens(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId,\n                numberOfTokens || 0\n            )\n        )\n    ),\n    onDelete: () => (\n        dispatch(\n            removeNode(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId\n            )\n        )\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PlaceForm));\n","import React, {Component} from 'react';\nimport {Button, Form, Input} from 'antd';\n\nclass TransitionForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleLabelChange = this.handleLabelChange.bind(this);\n    }\n\n    handleLabelChange(event) {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[a-zA-Z]?$\");\n\n        if (regexp.test(newValue)) {\n            this.props.onLabelChange(event.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Transition</h2>\n                <Form layout=\"vertical\">\n                    <p style={{color: \"darkred\"}}>Name should be a letter corresponding to trace event</p>\n                    <Form.Item label=\"\">\n                        <Input id=\"label\" placeholder=\"Enter name\"\n                               value={this.props.label}\n                               onChange={this.handleLabelChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default TransitionForm;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {removeNode, setLabel} from '../actions';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors';\nimport TransitionForm from '../components/TransitionForm';\n\nconst mapStateToProps = (state, ownProps) => {\n    const petriNet = getCurrentPetriNet(state, ownProps);\n    const transition = petriNet.nodesById[ownProps.transitionId]\n    return {\n        label: transition.label,\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onLabelChange: label => (\n        dispatch(\n            setLabel(\n                getCurrentPetriNetId(ownProps),\n                ownProps.transitionId,\n                label\n            )\n        )\n    ),\n    onDelete: () => (\n        dispatch(\n            removeNode(\n                getCurrentPetriNetId(ownProps),\n                ownProps.transitionId\n            )\n        )\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TransitionForm));\n","import React, {Component} from 'react';\nimport * as elementType from '../constants/elementTypes';\nimport * as nodeType from '../constants/nodeTypes';\nimport EdgeFormContainer from '../containers/EdgeFormContainer';\nimport PlaceFormContainer from '../containers/PlaceFormContainer';\nimport TransitionFormContainer from '../containers/TransitionFormContainer';\n\nclass EditorSidebar extends Component {\n    render() {\n        switch (this.props.elementType) {\n            case elementType.EDGE:\n                return this.renderEdgeForm();\n            case elementType.NODE:\n                return this.renderNodeForm();\n            default:\n                return null;\n        }\n    }\n\n    renderEdgeForm() {\n        return <EdgeFormContainer edgeId={this.props.element.id}/>\n    }\n\n    renderNodeForm() {\n        switch (this.props.element.type) {\n            case nodeType.PLACE:\n                return this.renderPlaceForm();\n            case nodeType.TRANSITION:\n                return this.renderTransitionForm();\n            default:\n                return null;\n        }\n    }\n\n    renderPlaceForm() {\n        return <PlaceFormContainer placeId={this.props.element.id}/>\n    }\n\n    renderTransitionForm() {\n        return <TransitionFormContainer transitionId={this.props.element.id}/>\n    }\n}\n\nexport default EditorSidebar;\n","export const EDGE = 'EDGE';\nexport const NODE = 'NODE';\n","import React, {Component} from 'react';\n\nclass Delayed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {display: false}\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({display: true}), 0);\n    }\n\n    render() {\n        if (this.state.display === false) {\n            return null;\n        }\n\n        return (\n            <>\n                {this.props.children}\n            </>\n        )\n    }\n}\n\nexport default Delayed;\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport Delayed from './Delayed';\nimport './css/GraphArea.css';\n\nconst {Content} = Layout;\n\nclass GraphArea extends Component {\n    render() {\n        return (\n            <Content className=\"graph_area\">\n                <Delayed>\n                    {this.props.children}\n                </Delayed>\n            </Content>\n        )\n    }\n}\n\nexport default GraphArea;\n","import memoizee from 'memoizee';\n\nclass ElementCfgFactory {\n    constructor() {\n        const cacheOptions = {primitive: true, max: 100};\n        this._edgeCfg = memoizee(this._edgeCfg, cacheOptions);\n        this._nodeCfg = memoizee(this._nodeCfg, cacheOptions);\n    }\n\n    _edgeCfg(id, source, target, weight, selected, selectable, grabbable) {\n        return {\n            group: \"edges\",\n            data: {id, source, target, weight},\n            selected,\n            selectable,\n            grabbable,\n        };\n    }\n\n    edgeCfg({id, source, target, weight = 1, selected = false, selectable = true, grabbable = true}) {\n        return this._edgeCfg(id, source, target, weight, selected, selectable, grabbable)\n    }\n\n    _nodeCfg(id, type, label, numberOfTokens, x, y, selected, selectable, grabbable, classes) {\n        return {\n            group: \"nodes\",\n            data: {id, type, label, numberOfTokens},\n            position: {x, y},\n            selected,\n            selectable,\n            grabbable,\n            classes,\n        };\n    }\n\n    nodeCfg({\n                id,\n                type,\n                label,\n                numberOfTokens,\n                position: {x, y},\n                selected = false,\n                selectable = true,\n                grabbable = true,\n                classes\n            }) {\n        return this._nodeCfg(id, type, label, numberOfTokens, x, y, selected, selectable, grabbable, classes);\n    }\n}\n\nexport default ElementCfgFactory;\n","import {getNumberOfTokens} from '../selectors/petriNet';\n\nconst elementByIdReducer = (obj, element) => {\n    obj[element.data.id] = element;\n    return obj;\n};\n\nclass PetriNetToElementCfgsMapper {\n    constructor(petriNet, factory, {selectedId, highlightedIds = [], locked = false}) {\n        this.petriNet = petriNet;\n        this.factory = factory;\n        this.selectedId = selectedId;\n        this.highlightedIds = highlightedIds;\n        this.locked = locked;\n    }\n\n    edgeCfg(edge) {\n        return this.factory.edgeCfg({\n            id: edge.id,\n            source: edge.from,\n            target: edge.to,\n            weight: edge.weight,\n            selected: this.isSelected(edge.id),\n            selectable: !this.locked,\n            grabbable: !this.locked,\n        });\n    }\n\n    edgeCfgsById() {\n        const edges = Object.values(this.petriNet.edgesById);\n        return edges.map(this.edgeCfg.bind(this)).reduce(elementByIdReducer, {});\n    }\n\n    isHighlighted = (id) => {\n        return this.highlightedIds.indexOf(id) !== -1;\n    }\n\n    isSelected = (id) => {\n        return this.selectedId === id;\n    }\n\n    map() {\n        return {\n            ...this.nodeCfgsById(),\n            ...this.edgeCfgsById(),\n        }\n    }\n\n    nodeCfg(node) {\n        return this.factory.nodeCfg({\n            id: node.id,\n            type: node.type,\n            label: this.nodeLabel(node),\n            numberOfTokens: this.nodeNumberOfTokens(node),\n            position: node.position,\n            selected: this.isSelected(node.id),\n            selectable: !this.locked,\n            grabbable: !this.locked,\n            classes: this.nodeClasses(node),\n        });\n    }\n\n    nodeCfgsById = () => {\n        const nodes = Object.values(this.petriNet.nodesById);\n        return nodes.map(this.nodeCfg.bind(this)).reduce(elementByIdReducer, {});\n    }\n\n    nodeClasses(node) {\n        const classes = [node.type];\n        if (this.isHighlighted(node.id)) {\n            classes.push('highlighted');\n        }\n        return classes.join(' ');\n    }\n\n    nodeLabel = (node) => {\n        let parts = [];\n        if (node.label !== undefined && node.label.length > 0) {\n            parts.push(node.label);\n        }\n        if (node.capacityLimit !== undefined) {\n            parts.push(`(max. ${node.capacityLimit})`);\n        }\n        return parts.join(' ');\n    }\n\n    nodeNumberOfTokens = (node) => (\n        getNumberOfTokens(this.petriNet, node.id)\n    )\n}\n\nexport default PetriNetToElementCfgsMapper;\n","import React from 'react';\n\nconst CytoscapeContext = React.createContext();\n\nexport default CytoscapeContext;\n","import {PureComponent} from 'react';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\n\ncytoscape.use(edgehandles);\n\nclass EdgeHandles extends PureComponent {\n    static contextType = CytoscapeContext;\n\n    constructor(props) {\n        super(props);\n        this.edgeParams = this.edgeParams.bind(this);\n        this.edgeType = this.edgeType.bind(this);\n        this.handleComplete = this.handleComplete.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.initEdgeHandles();\n    }\n\n    componentDidUpdate = () => {\n        this.initEdgeHandles();\n    }\n\n    edgeParams(sourceNode, targetNode) {\n        return this.props.edgeParams(sourceNode.id(), targetNode.id());\n    }\n\n    edgeType(sourceNode, targetNode) {\n        if (this.shouldAddEdge(sourceNode, targetNode)) {\n            return 'flat';\n        }\n    }\n\n    handleComplete(sourceNode, targetNode) {\n        this.props.onAddEdge(sourceNode.id(), targetNode.id());\n    }\n\n    initEdgeHandles() {\n        if (this.context === undefined) {\n            return;\n        }\n        if (this.edgehandles !== undefined) {\n            this.edgehandles.destroy();\n        }\n\n        this.edgehandles = this.context.edgehandles({\n            complete: this.handleComplete,\n            edgeParams: this.edgeParams,\n            edgeType: this.edgeType,\n            snap: this.props.snap,\n        });\n    }\n\n    render() {\n        return null;\n    }\n\n    shouldAddEdge(sourceNode, targetNode) {\n        if (targetNode.length === 0) {\n            return false;\n        }\n        if (targetNode.same(this.edgehandles.handleNode)) {\n            return false;\n        }\n\n        return this.props.shouldAddEdge(sourceNode.id(), targetNode.id());\n    }\n}\n\nexport default EdgeHandles;\n","const keyToValueMapper = (callback, obj) => {\n    if (callback === undefined) {\n        return;\n    }\n    return (key) => callback(obj[key]);\n};\n\nexport const compareByKey = ({prev, current, onAdd, onRemove, onRemain}) => {\n    compareByValue({\n        prev: Object.keys(prev),\n        current: Object.keys(current),\n        onAdd: keyToValueMapper(onAdd, current),\n        onRemove: keyToValueMapper(onRemove, prev),\n        onRemain: keyToValueMapper(onRemain, current),\n    });\n};\n\nexport const compareByValue = ({prev, current, onAdd, onRemove, onRemain}) => {\n    const added = current.filter(val => prev.indexOf(val) === -1);\n    const removed = prev.filter(val => current.indexOf(val) === -1);\n    const subsisted = current.filter(val => added.indexOf(val) === -1);\n\n    if (onAdd !== undefined) {\n        added.forEach(val => onAdd(val));\n    }\n    if (onRemove !== undefined) {\n        removed.forEach(val => onRemove(val));\n    }\n    if (onRemain !== undefined) {\n        subsisted.forEach(val => onRemain(val));\n    }\n};\n\nexport default {\n    compareByKey,\n    compareByValue,\n};\n","import React, {Component} from 'react';\n\nclass StaticDiv extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        const {divRef, ...rest} = this.props;\n\n        return (\n            <div ref={divRef} {...rest} />\n        );\n    }\n}\n\nexport default StaticDiv;\n","import React, {PureComponent} from 'react';\nimport cytoscape from 'cytoscape';\nimport cloneDeep from 'lodash/cloneDeep';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\nimport changeDetector from '../utils/changeDetector';\nimport * as elementType from '../constants/elementTypes';\nimport StaticDiv from './StaticDiv';\nimport './css/Graph.css';\n\nclass Graph extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.cyContainerRef = React.createRef();\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    addElement(params) {\n        this.cy.add(cloneDeep(params));\n    }\n\n    callCallback(callback, ...args) {\n        if (callback === undefined) {\n            return;\n        }\n        callback(...args);\n    }\n\n    componentDidMount() {\n        this.initCytoscape();\n        this.setLoaded();\n    }\n\n    componentDidUpdate() {\n        this.updateCytoscape();\n        this.setLoaded();\n    }\n\n    elementType(element) {\n        return element.group() === 'nodes' ? elementType.NODE : elementType.EDGE;\n    }\n\n    findElement(params) {\n        const elements = this.cy.elements(`#${params.data.id}`);\n        if (elements.length === 1) {\n            return elements.first();\n        } else if (elements.length > 0) {\n            throw new Error('ambiguous id');\n        }\n    }\n\n    handleClick = (event) => {\n        if (event.target === this.cy) {\n            this.callCallback(this.props.onClickOnBackground, {...event.position});\n            return;\n        }\n\n        this.callCallback(this.props.onClickOnElement, this.elementType(event.target), event.target.id());\n    }\n\n    handleFree = (event) => {\n        if (this.hasNodeMoved(event.target)) {\n            this.callCallback(this.props.onMove, event.target.id(), {...event.target.position()});\n        }\n    }\n\n    handleGrab = (event) => {\n        event.target.select();\n    }\n\n    handleSelect = (event) => {\n        this.callCallback(this.props.onSelect, this.elementType(event.target), event.target.id());\n    }\n\n    handleUnselect = (event) => {\n        this.callCallback(this.props.onUnselect, this.elementType(event.target), event.target.id());\n    }\n\n    hasNodeMoved(node) {\n        const loadedPosition = this.loaded.elementsById[node.id()].position;\n        return loadedPosition.x !== node.position().x || loadedPosition.y !== node.position().y;\n    }\n\n    initCytoscape() {\n        const elements = Object.values(this.props.elementsById || {});\n        this.cy = cytoscape({\n            container: this.cyContainerRef.current,\n            elements: cloneDeep(elements),\n            layout: cloneDeep(this.props.layout || {}),\n            maxZoom: this.props.maxZoom,\n            style: cloneDeep(this.props.style || {}),\n        });\n        this.cy.on('free', this.handleFree);\n        this.cy.on('grab', this.handleGrab);\n        this.cy.on('select', this.handleSelect);\n        this.cy.on('unselect', this.handleUnselect);\n        this.cy.on('vclick', this.handleClick);\n\n        this.setState({cy: this.cy});\n    }\n\n    removeElement(params) {\n        const element = this.findElement(params);\n        if (element === undefined) {\n            return;\n        }\n\n        element.remove();\n    }\n\n    render() {\n        return (\n            <div className=\"graph\">\n                <StaticDiv className=\"cytoscape_container\" divRef={this.cyContainerRef}/>\n                <CytoscapeContext.Provider value={this.state.cy}>\n                    {this.props.children}\n                </CytoscapeContext.Provider>\n            </div>\n        );\n    }\n\n    setLoaded() {\n        this.loaded = {\n            elementsById: this.props.elementsById,\n            layout: this.props.layout,\n            style: this.props.style,\n        };\n    }\n\n    updateCytoscape() {\n        this.updateElements();\n        this.updateOptions();\n    }\n\n    updateElement(params) {\n        const prevParams = this.loaded.elementsById[params.data.id];\n        if (prevParams === params) {\n            return;\n        }\n\n        const element = this.findElement(params);\n        if (element === undefined) {\n            return;\n        }\n\n        element.json(cloneDeep(params));\n    }\n\n    updateElements() {\n        const prev = this.loaded.elementsById;\n        const current = this.props.elementsById;\n        if (prev === current) {\n            return;\n        }\n\n        changeDetector.compareByKey({\n            prev,\n            current,\n            onAdd: (params) => (\n                this.findElement(params) ? this.updateElement(params) : this.addElement(params)\n            ),\n            onRemove: (params) => this.removeElement(params),\n            onRemain: (params) => this.updateElement(params),\n        });\n    }\n\n    updateOption(key) {\n        if (this.props[key] === this.loaded[key]) {\n            return;\n        }\n\n        this.cy[key](cloneDeep(this.props[key]));\n    }\n\n    updateOptions() {\n        const optionsToUpdate = ['layout', 'maxZoom', 'style'];\n        optionsToUpdate.map(key => this.updateOption(key));\n    }\n}\n\nexport default Graph;\n","import oneToken from '../images/one-token.svg';\nimport twoTokens from '../images/two-tokens.svg';\nimport threeTokens from '../images/three-tokens.svg';\nimport fourTokens from '../images/four-tokens.svg';\nimport fiveTokens from '../images/five-tokens.svg';\nimport sixTokens from '../images/six-tokens.svg';\nimport sevenTokens from '../images/seven-tokens.svg';\nimport eightTokens from '../images/eight-tokens.svg';\nimport nineTokens from '../images/nine-tokens.svg';\n\nconst primaryColor = '#404040';\nconst secondaryColor = '#BFBFBF';\nconst selectedColor = '#1890ff';\nconst textColor = '#242424';\nconst fontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\nconst fontSize = 20;\n\nconst generateImageWithNumber = (number) => {\n    const svg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 80 80\">\n      <text x=\"50%\" y=\"50%\" dy=\".3em\" fill=\"black\" style='font-family: ${fontFamily}; font-size: 20px; text-anchor: middle;'>\n        ${number}\n      </text>\n    </svg>\n  `;\n    return 'data:image/svg+xml;utf8,' + encodeURIComponent(svg);\n}\n\nconst cachedImages = {};\nconst getImageWithNumber = (number) => {\n    if (cachedImages[number] === undefined) {\n        cachedImages[number] = generateImageWithNumber(number);\n    }\n    return cachedImages[number];\n}\n\nconst tokenImages = [\n    oneToken, twoTokens, threeTokens, fourTokens, fiveTokens,\n    sixTokens, sevenTokens, eightTokens, nineTokens,\n];\nconst getBackgroundImageOfPlace = (place) => {\n    const number = place.data('numberOfTokens');\n    if (number === 0) {\n        return [];\n    } else if (number < 10) {\n        return tokenImages[number - 1];\n    }\n\n    return getImageWithNumber(number);\n}\n\nexport default [\n    {\n        selector: '*',\n        style: {\n            'font-size': fontSize,\n            'font-family': fontFamily,\n            'color': textColor,\n        },\n    },\n    {\n        selector: 'node',\n        style: {\n            'border-color': primaryColor,\n            'border-width': 2,\n            'text-valign': 'bottom',\n            'text-halign': 'center',\n            'text-margin-y': 10,\n            'background-color': secondaryColor,\n            'background-fit': 'cover',\n            'label': 'data(label)',\n        }\n    },\n    {\n        selector: 'node.highlighted',\n        style: {\n            'background-color': selectedColor,\n        },\n    },\n    {\n        selector: 'node:selected',\n        style: {\n            'border-color': selectedColor,\n        }\n    },\n    {\n        selector: 'node.place',\n        style: {\n            'height': 80,\n            'width': 80,\n            'background-image': (element) => getBackgroundImageOfPlace(element),\n        },\n    },\n    {\n        selector: 'node.transition',\n        style: {\n            'shape': 'rectangle',\n            'height': 80,\n            'width': 20,\n        },\n    },\n    {\n        selector: 'node.token',\n        style: {\n            'height': 10,\n            'width': 10,\n            'background-color': 'black',\n            'border-width': 0,\n        },\n    },\n    {\n        selector: 'edge',\n        style: {\n            'width': 2,\n            'target-arrow-shape': 'triangle',\n            'line-color': primaryColor,\n            'target-arrow-color': primaryColor,\n            'curve-style': 'bezier',\n            'label': 'data(weight)',\n            'text-margin-y': 14,\n        },\n    },\n    {\n        selector: 'edge:selected',\n        style: {\n            'line-color': selectedColor,\n            'target-arrow-color': selectedColor,\n        },\n    },\n    {\n        selector: '.eh-ghost-edge.eh-preview-active',\n        style: {\n            'opacity': 0\n        },\n    },\n];\n","import React, {PureComponent} from 'react';\nimport {getIncomingEdges} from '../selectors/petriNet';\nimport ElementCfgFactory from '../utils/ElementCfgFactory';\nimport PetriNetToElementCfgsMapper from '../utils/PetriNetToElementCfgsMapper';\nimport EdgeHandles from './EdgeHandles';\nimport Graph from './Graph';\nimport petriNetGraphStyle from './PetriNetGraphStyle';\n\nclass PetriNetGraph extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.elementCfgFactory = new ElementCfgFactory();\n        this.edgeParams = this.edgeParams.bind(this);\n        this.shouldAddEdge = this.shouldAddEdge.bind(this);\n        this.state = {\n            layout: {\n                name: 'preset',\n            },\n        };\n    }\n\n    edgeParams(from, to) {\n        return this.elementCfgFactory.edgeCfg({\n            id: `${from}_${to}`,\n            source: from,\n            target: to,\n        });\n    }\n\n    elementsById() {\n        return new PetriNetToElementCfgsMapper(\n            this.props.petriNet,\n            this.elementCfgFactory,\n            {\n                selectedId: this.props.selectedId,\n                highlightedIds: this.props.highlightedIds,\n                locked: this.props.locked,\n            }\n        ).map();\n    }\n\n    shouldAddEdge(from, to) {\n        if (from === to) {\n            return false;\n        }\n\n        const petriNet = this.props.petriNet;\n        const fromNode = petriNet.nodesById[from];\n        const toNode = petriNet.nodesById[to];\n        if (fromNode === undefined || toNode === undefined || fromNode.type === toNode.type) {\n            return false;\n        }\n\n        const incomingNodeIds = getIncomingEdges(petriNet, toNode.id).map(edge => edge.from);\n        return incomingNodeIds.indexOf(fromNode.id) === -1;\n    }\n\n    render = () => {\n        return (\n            <Graph style={petriNetGraphStyle}\n                   layout={this.state.layout}\n                   elementsById={this.elementsById()}\n                   {...this.props}>\n                {this.renderEdgeHandles()}\n                {this.props.children}\n            </Graph>\n        );\n    }\n\n    renderEdgeHandles() {\n        if (this.props.locked === true) {\n            return;\n        }\n\n        return <EdgeHandles onAddEdge={this.props.onAddEdge}\n                            shouldAddEdge={this.shouldAddEdge}\n                            snap={true}\n                            edgeParams={this.edgeParams}/>\n    }\n}\n\nexport default PetriNetGraph;\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport uuidv4 from 'uuid/v4';\nimport * as elementType from '../constants/elementTypes';\nimport * as nodeType from '../constants/nodeTypes';\nimport EditorToolbar from './EditorToolbar';\nimport ElementForm from './ElementForm';\nimport GraphArea from './GraphArea';\nimport PetriNetGraph from './PetriNetGraph';\nimport './css/Editor.css';\n\nconst {Sider} = Layout;\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeNodeType: nodeType.TRANSITION,\n            selected: {},\n        };\n        this.handleAddEdge = this.handleAddEdge.bind(this);\n        this.handleClickOnBackground = this.handleClickOnBackground.bind(this);\n        this.handleNodeTypeChange = this.handleNodeTypeChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleUnselect = this.handleUnselect.bind(this);\n    }\n\n    getSelectedElement() {\n        const id = this.state.selected.id;\n        switch (this.state.selected.type) {\n            case elementType.EDGE:\n                return this.props.petriNet.edgesById[id];\n            case elementType.NODE:\n                return this.props.petriNet.nodesById[id];\n            default:\n                return;\n        }\n    }\n\n    handleAddEdge(from, to) {\n        this.props.onAddEdge(from, to);\n        this.setState({selected: {type: elementType.EDGE, id: `${from}_${to}`}});\n    }\n\n    handleClickOnBackground(position) {\n        const nodeId = uuidv4();\n        this.props.onAddNode(nodeId, this.state.activeNodeType, position);\n        this.setState({selected: {type: elementType.NODE, id: nodeId}});\n    }\n\n    handleSelect(type, id) {\n        this.setState({selected: {type, id}});\n    }\n\n    handleUnselect(id) {\n        if (id !== this.state.selected.id) {\n            return;\n        }\n        this.setState({selected: {}});\n    }\n\n    handleNodeTypeChange(nodeType) {\n        this.setState({activeNodeType: nodeType});\n    }\n\n    clearPetriNet = () => {\n        this.props.petriNet.edgesById = {};\n        this.props.petriNet.nodesById = {};\n        this.props.petriNet.markings = [{}];\n        this.setState({selected: {}});\n    }\n\n    render() {\n        return (\n            <>\n                <EditorToolbar activeNodeType={this.state.activeNodeType}\n                               onNodeTypeChange={this.handleNodeTypeChange}\n                               onClear={this.clearPetriNet}/>\n                <Layout>\n                    <GraphArea>\n                        <PetriNetGraph\n                            petriNet={this.props.petriNet}\n                            selectedId={this.state.selected.id}\n                            maxZoom={1}\n                            onAddEdge={this.handleAddEdge}\n                            onClickOnBackground={this.handleClickOnBackground}\n                            onMove={this.props.onMove}\n                            onSelect={this.handleSelect}\n                            onUnselect={this.handleUnselect}/>\n                    </GraphArea>\n                    {this.renderSidebar()}\n                </Layout>\n            </>\n        );\n    }\n\n    renderSidebar() {\n        const element = this.getSelectedElement();\n        if (element === undefined) {\n            return;\n        }\n\n        return <Sider className=\"editor__sidebar\" width={260}>\n            <ElementForm element={element} elementType={this.state.selected.type}/>\n        </Sider>\n    }\n}\n\nexport default Editor;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {addEdge, addNode, moveNode} from '../actions';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors';\nimport Editor from '../components/Editor';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: getCurrentPetriNet(state, ownProps),\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onAddEdge: (from, to) => dispatch(\n        addEdge(getCurrentPetriNetId(ownProps), from, to)\n    ),\n    onAddNode: (nodeId, nodeType, position) => dispatch(\n        addNode(getCurrentPetriNetId(ownProps), nodeId, nodeType, position)\n    ),\n    onMove: (id, position) => dispatch(\n        moveNode(getCurrentPetriNetId(ownProps), id, position)\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Editor));\n","class TokenFlowAnimation {\n    constructor(edgeElement) {\n        this.cytoscape = edgeElement.cy();\n        this.edgeElement = edgeElement;\n        this.speed = 350;\n    }\n\n    async play(speed) {\n        this.speed = speed;\n        const token = this.addToken();\n        await this.animateToken(token)\n        this.removeToken(token);\n    }\n\n    addToken() {\n        return this.cytoscape.add({\n            group: \"nodes\",\n            classes: \"token\",\n            position: this.edgeElement.sourceEndpoint(),\n        });\n    }\n\n    animateToken(token) {\n        throw new Error('Not implemented');\n    }\n\n    removeToken(token) {\n        token.remove();\n    }\n}\n\nexport default TokenFlowAnimation;\n","export const valueAt = (p0, p1, p2, t) => (\n    (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2\n);\n\nexport const pointAt = (p0, p1, p2, t) => ({\n    x: valueAt(p0.x, p1.x, p2.x, t),\n    y: valueAt(p0.y, p1.y, p2.y, t),\n});\n\nexport default {\n    valueAt,\n    pointAt,\n};\n","import TokenFlowAnimation from './TokenFlowAnimation';\nimport bezierCurve from './../utils/bezierCurve';\n\nclass BezierCurveTokenFlowAnimation extends TokenFlowAnimation {\n    pointOnBezierCurve(t) {\n        return bezierCurve.pointAt(\n            this.edgeElement.sourceEndpoint(),\n            this.edgeElement.controlPoints()[0],\n            this.edgeElement.targetEndpoint(),\n            t\n        );\n    }\n\n    animateToken(token) {\n        let numberOfSteps = 30;\n        let durationOfStep = this.speed / numberOfSteps;\n        let delta = 1.0 / numberOfSteps;\n        for (var i = 0; i < (numberOfSteps - 1); i++) {\n            let t = delta * (i + 1);\n            token.animate({\n                position: this.pointOnBezierCurve(t),\n                duration: durationOfStep,\n            });\n        }\n\n        var animation = token.animation({\n            position: this.edgeElement.targetEndpoint(),\n            duration: durationOfStep,\n            queue: true,\n        });\n        return animation.play().promise();\n    }\n}\n\nexport default BezierCurveTokenFlowAnimation;\n","import TokenFlowAnimation from './TokenFlowAnimation';\n\nclass LinearTokenFlowAnimation extends TokenFlowAnimation {\n    animateToken(token) {\n        var animation = token.animation({\n            position: this.edgeElement.targetEndpoint(),\n            duration: this.speed,\n            queue: true,\n        });\n        return animation.play().promise();\n    }\n}\n\nexport default LinearTokenFlowAnimation;\n","import BezierCurveTokenFlowAnimation from './BezierCurveTokenFlowAnimation';\nimport LinearTokenFlowAnimation from './LinearTokenFlowAnimation';\n\nconst isBezierCurve = (edgeElement) => (\n    edgeElement.controlPoints() !== undefined\n)\n\nconst animationFor = (edgeElement) => {\n    if (isBezierCurve(edgeElement)) {\n        return new BezierCurveTokenFlowAnimation(edgeElement);\n    }\n    return new LinearTokenFlowAnimation(edgeElement);\n}\n\nexport default {animationFor}\n","import TokenFlowAnimationFactory from './TokenFlowAnimationFactory';\n\nclass TransitionAnimation {\n    constructor(transitionElement) {\n        this.canceled = false;\n        this.cytoscape = transitionElement.cy();\n        this.transitionElement = transitionElement;\n        this.speed = 350;\n    }\n\n    async animateIncomingEdge(edgeElement) {\n        const source = edgeElement.source();\n        const numberOfTokens = source.data('numberOfTokens') - edgeElement.data('weight');\n        source.data('numberOfTokens', numberOfTokens);\n\n        await this.animateTokenFlowOfEdge(edgeElement);\n    }\n\n    animateIncomingEdges() {\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const incomingEdges = this.transitionElement.incomers('edge');\n        const promises = incomingEdges.map(\n            this.animateIncomingEdge.bind(this)\n        );\n        return Promise.all(promises);\n    }\n\n    async animateOutgoingEdge(edgeElement) {\n        await this.animateTokenFlowOfEdge(edgeElement);\n\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const target = edgeElement.target();\n        const numberOfTokens = target.data('numberOfTokens') + edgeElement.data('weight');\n        target.data('numberOfTokens', numberOfTokens);\n    }\n\n    animateOutgoingEdges() {\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const outgoingEdges = this.transitionElement.outgoers('edge');\n        const promises = outgoingEdges.map(\n            this.animateOutgoingEdge.bind(this)\n        );\n        return Promise.all(promises);\n    }\n\n    animateTokenFlowOfEdge(edgeElement) {\n        return TokenFlowAnimationFactory.animationFor(edgeElement).play(this.speed);\n    }\n\n    cancel() {\n        this.canceled = true;\n    }\n\n    async play(speed) {\n        this.speed = speed;\n        await this.animateIncomingEdges();\n        await this.animateOutgoingEdges();\n    }\n}\n\nexport default TransitionAnimation;\n","import {PureComponent} from 'react';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\n\nclass GraphAnimation extends PureComponent {\n    static contextType = CytoscapeContext;\n\n    async play() {\n        const element = this.context.elements(`#${this.props.elementId}`).first();\n        this.animation = new this.props.animation(element);\n\n        await this.animation.play(this.props.speed);\n        if (this.props.onEnd !== undefined) {\n            this.props.onEnd();\n        }\n    }\n\n    cancel() {\n        this.animation.cancel();\n    }\n\n    componentDidMount() {\n        this.play();\n    }\n\n    componentWillUnmount() {\n        this.cancel();\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default GraphAnimation;\n","export const SLOW = 'Slow';\nexport const FAST = 'Fast';\n","import React, {Component} from 'react';\nimport {Button, Radio} from 'antd';\nimport Toolbar from './Toolbar';\nimport './css/HorizontalToolbar.css';\nimport * as speedType from \"../constants/speedTypes\";\n\nclass SimulatorToolbar extends Component {\n\n    handleChange = (event) => {\n        this.props.onSpeedChange(event.target.value);\n    }\n\n    render() {\n        const speed = this.props.speed;\n\n        return (\n            <Toolbar backgroundColor=\"#008B27\">\n                <Radio.Group value={speed} onChange={this.handleChange} buttonStyle=\"solid\">\n                    <Radio.Button value={speedType.SLOW}>\n                        {speedType.SLOW}\n                    </Radio.Button>\n                    <Radio.Button value={speedType.FAST}>\n                        {speedType.FAST}\n                    </Radio.Button>\n                </Radio.Group>\n                <Button id=\"run\" icon=\"play-circle\" className=\"btn-margin\" onClick={this.props.onRun}>Run</Button>\n                <Button id=\"runStep\" icon=\"play-circle\" className=\"btn-margin\" onClick={this.props.onRunStep}>Run step</Button>\n                <Button id=\"pause\" icon=\"pause\" className=\"btn-margin\" onClick={this.props.onPause}>Pause</Button>\n                <Button id=\"reset\" icon=\"reload\" className=\"btn-margin\" onClick={this.props.onReset}>Reset</Button>\n            </Toolbar>\n        )\n    }\n}\n\nexport default SimulatorToolbar;\n","import React, {Component} from 'react';\nimport './css/Logo.css';\n\nclass Logo extends Component {\n    render() {\n        return (\n            <div className=\"logo\"/>\n        );\n    }\n}\n\nexport default Logo;\n","export const simulatorInitialState = {\n    fitness: undefined,\n    isRunning: false,\n    traceIdx: 0,\n    pos: 0,\n    produced: 0,\n    consumed: 0,\n    missing: 0,\n    remaining: 0,\n    curProduced: 0,\n    curConsumed: 0,\n    curMissing: 0,\n    curRemaining: 0,\n}\n\nexport default {\n    simulatorInitialState,\n};\n","import React, {Component} from 'react';\nimport TransitionAnimation from '../animations/TransitionAnimation';\nimport {\n    getActiveTransitions,\n    getNumConsumedTokens,\n    getNumProducedTokens,\n    getNumNetTokens,\n    getTransitionByLabel,\n    getNumMissingTokens,\n} from '../selectors/petriNet';\nimport GraphArea from './GraphArea';\nimport GraphAnimation from './GraphAnimation';\nimport PetriNetGraph from './PetriNetGraph';\nimport SimulatorToolbar from './SimulatorToolbar'\nimport * as nodeTypes from \"../constants/nodeTypes\";\nimport {Notify} from 'notiflix/build/notiflix-notify-aio';\nimport Sider from \"antd/es/layout/Sider\";\nimport {Layout} from \"antd\";\nimport './css/Simulator.css';\nimport Logo from \"./Logo\";\nimport {FAST, SLOW} from \"../constants/speedTypes\";\nimport {simulatorInitialState} from \"../utils/initialState\";\n\nclass Simulator extends Component {\n    constructor(props) {\n        super(props);\n        this.handleAnimationEnd = this.handleAnimationEnd.bind(this);\n        this.handleClickOnElement = this.handleClickOnElement.bind(this);\n        this.state = {reset: true, animationSpeed: 550, waitTime: 1650, speed: SLOW, ...simulatorInitialState};\n        this.markings = JSON.parse(JSON.stringify(this.props.petriNet.markings));\n        this.isStepReady = true;\n    }\n\n    activeTransitionIds() {\n        if (this.props.petriNet === undefined) {\n            return [];\n        }\n\n        return getActiveTransitions(this.props.petriNet).map(transition => transition.id);\n    }\n\n    componentWillUnmount() {\n        this.reset();\n    }\n\n    handleAnimationEnd() {\n        this.props.onFireTransition(this.state.selected);\n        this.setState({selected: undefined});\n    }\n\n    handleClickOnElement(type, id) {\n        if (!this.isTransitionActive(id) || this.state.selected !== undefined) {\n            return;\n        }\n        this.setState({selected: id});\n    }\n\n    highlightedIds() {\n        return this.state.selected ? [] : this.activeTransitionIds();\n    }\n\n    isTransitionActive(id) {\n        return this.activeTransitionIds().indexOf(id) !== -1;\n    }\n\n    async wait(time) {\n        const sleep = ms => new Promise(r => setTimeout(r, ms));\n        await sleep(time === undefined ? 1500 : time);\n    }\n\n    validatePetriNet = () => {\n        const net = this.props.petriNet;\n        return Object.values(net.edgesById).length >= Object.values(net.nodesById).length - 1;\n    }\n\n    validateTransitionNames = () => {\n        const transitionNames = new Set();\n        const transitions = Object.values(this.props.petriNet.nodesById)\n            .filter(node => node.type === nodeTypes.TRANSITION);\n\n        transitions.forEach(trans => {\n            if (trans.label !== null && trans.label !== undefined && trans.label !== '') {\n                transitionNames.add(trans.label);\n            }\n        });\n\n        const namesFromTraces = new Set();\n        const traces = this.props.petriNet.traces.map(t => t.trace);\n        traces.forEach(trace => {\n            trace.split('').forEach(name => {\n                namesFromTraces.add(name);\n            })\n        });\n\n        const areSetsEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value));\n\n        return transitions.length === transitionNames.size && areSetsEqual(namesFromTraces, transitionNames);\n    }\n\n    changeSpeed = (newSpeed) => {\n        switch (newSpeed) {\n            case FAST: {\n                this.setState({speed: FAST, animationSpeed: 100, waitTime: 350});\n                return;\n            }\n            default: {\n                this.setState({speed: SLOW, animationSpeed: 550, waitTime: 1650});\n            }\n        }\n    }\n\n    onMissingToken = async () => {\n        console.log(\"Missing token\");\n        const net = this.props.petriNet;\n        const {traceIdx, pos} = this.state;\n        const transition = getTransitionByLabel(net, net.traces[traceIdx].trace[pos]);\n        const curMissing = this.state.curMissing + getNumMissingTokens(net, transition.id);\n        this.props.onAddTokens(transition.id);\n        this.setState({curMissing: curMissing});\n    }\n\n    isFinished = () => {\n        const traces = this.props.petriNet.traces;\n        const traceIdx = this.state.traceIdx;\n        return traces.length <= traceIdx;\n    }\n\n    updateUiTokens = (currentTrace) => {\n        const {produced, consumed, missing, remaining} = this.state;\n        let {curProduced, curConsumed, curMissing, curRemaining} = this.state;\n        if (currentTrace !== undefined) {\n            curProduced *= currentTrace.number;\n            curConsumed *= currentTrace.number;\n            curMissing *= currentTrace.number;\n            curRemaining *= currentTrace.number;\n        }\n        this.setState({produced: produced + curProduced, consumed: consumed + curConsumed,\n                             missing: missing + curMissing, remaining: remaining + curRemaining,\n                             curProduced: 0, curConsumed: 0, curMissing: 0, curRemaining: 0});\n    }\n\n    updateTransitionTokens = (transitionId) => {\n        const net = this.props.petriNet;\n        const curProduced = this.state.curProduced + getNumProducedTokens(net, transitionId);\n        const curConsumed = this.state.curConsumed + getNumConsumedTokens(net, transitionId);\n        this.setState({curProduced: curProduced, curConsumed: curConsumed});\n    }\n\n    updateState = () => {\n        const {traceIdx, pos} = this.state;\n        const currentTrace = this.props.petriNet.traces[traceIdx];\n\n        if (currentTrace.trace.length === pos + 1) {\n            this.setState({traceIdx: traceIdx + 1, pos: 0, reset: true});\n        } else {\n            this.setState({pos: pos + 1});\n        }\n    }\n\n    onAlgorithmFinished = () => {\n        const curRemaining = getNumNetTokens(this.props.petriNet);\n        this.setState({curRemaining: curRemaining - 1});\n\n        this.updateUiTokens(this.props.petriNet.traces[this.state.traceIdx - 1]);\n        const {produced, consumed, missing, remaining} = this.state;\n        const fitness = 0.5 * (1 - missing / consumed) + 0.5 * (1 - remaining / produced);\n        this.setState({fitness: Number(fitness).toFixed(6)});\n\n        Notify.success(\"Algorithm has finished!\");\n    }\n\n    onNextTrace = async () => {\n        console.log(\"next trace\");\n        const traceIdx = this.state.traceIdx;\n        const petriNet = this.props.petriNet;\n        const currentTrace = petriNet.traces[traceIdx];\n\n        currentTrace.active = true;\n        if (traceIdx - 1 >= 0) {\n            petriNet.traces[traceIdx - 1].active = false;\n        }\n\n        // todo: refactor\n        let curRemaining = getNumNetTokens(petriNet);\n        curRemaining = curRemaining === 0 ? 1 : curRemaining;\n        const curProduced = this.state.curProduced;\n        const curConsumed = this.state.curConsumed;\n        this.setState({reset: false, curRemaining: curRemaining - 1,\n            curProduced: curProduced, curConsumed: curConsumed});\n\n        this.props.petriNet.markings = JSON.parse(JSON.stringify(this.markings));\n        this.updateUiTokens(petriNet.traces[traceIdx - 1]);\n\n        await this.props.onReset();\n    }\n\n    tryRunStep = () => {\n        if (this.state.isRunning) {\n            return;\n        }\n        if (this.isStepReady) {\n            this.isStepReady = false;\n            this.runStep();\n            setTimeout(() => this.isStepReady = true, this.state.waitTime + 30);\n        }\n    }\n\n    validateBeforeRun = () => {\n        if (!this.validatePetriNet()) {\n            Notify.failure(\"Process model is not consistent\");\n            return false;\n        }\n        if (this.props.petriNet.traces.length === 0) {\n            Notify.failure(\"There are no case traces to run\");\n            return false;\n        }\n        if (!this.validateTransitionNames()) {\n            Notify.failure(\"Transition names are incorrect\");\n            return false;\n        }\n        return true;\n    }\n\n    runStep = async () => {\n        console.log(\"idx: \", this.state.traceIdx, \"pos: \", this.state.pos);\n        if (!this.validateBeforeRun()) {\n            return;\n        }\n        if (this.isFinished()) {\n            this.onAlgorithmFinished();\n            return;\n        }\n\n        const {traceIdx, pos, reset} = this.state;\n        const petriNet = this.props.petriNet;\n        const currentTrace = petriNet.traces[traceIdx];\n\n        if (pos === 0 && reset) {\n            await this.onNextTrace();\n            return;\n        }\n\n        const activeTransitions = getActiveTransitions(petriNet)\n            .filter((t) => t.label === currentTrace.trace[pos]);\n\n        if (activeTransitions.length === 1) {\n            await this.handleClickOnElement(null, activeTransitions[0].id);\n            this.updateTransitionTokens(activeTransitions[0].id);\n            this.updateState();\n        } else {\n            await this.onMissingToken();\n        }\n    }\n\n    run = async () => {\n        if (this.state.isRunning) {\n            return;\n        }\n        if (!this.validateBeforeRun()) {\n            return;\n        }\n\n        this.setState({isRunning: true});\n        while (!this.isFinished()) {\n            await this.runStep();\n\n            await this.wait(this.state.waitTime);\n            if (!this.state.isRunning) {\n                return;\n            }\n        }\n        this.onAlgorithmFinished();\n        this.setState({isRunning: false});\n    }\n\n    pause = () => {\n        if (this.state.isRunning) {\n            this.setState({isRunning: false});\n            Notify.info(\"Algorithm paused\")\n        }\n    }\n\n    reset = async () => {\n        if (this.state.isRunning) {\n            await this.wait(50);\n        }\n\n        this.setState({reset: true, ...simulatorInitialState});\n        const traceIdx = this.state.traceIdx;\n        if (traceIdx < this.props.petriNet.traces.length && traceIdx >= 0) {\n            this.props.petriNet.traces[traceIdx].active = false;\n        }\n        if (this.props.petriNet.traces.length !== 0) {\n            this.props.petriNet.traces[this.props.petriNet.traces.length - 1].active = false;\n        }\n\n        this.props.petriNet.markings = JSON.parse(JSON.stringify(this.markings));\n        this.props.onReset();\n    }\n\n    renderResult = () => {\n        if (this.isFinished() && this.props.petriNet.traces.length !== 0 && this.state.fitness !== undefined) {\n            return (\n                <div className=\"wrapper\">\n                    <br/>\n                    <h6 className=\"center\">Result</h6>\n                    <Logo/>\n                    <br/>\n                    <h6>Fitness = {this.state.fitness}</h6>\n                </div>\n            )\n        }\n    }\n\n    renderCurrentTraceInfo = () => {\n        const trace = this.props.petriNet.traces.filter(tr => tr.active)[0];\n        if (trace !== undefined) {\n            return (<p>Multiplier: x{trace.number}</p>)\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <SimulatorToolbar onRun={this.run}\n                                  onRunStep={this.tryRunStep}\n                                  onReset={this.reset}\n                                  onPause={this.pause}\n                                  onSpeedChange={this.changeSpeed}\n                                  speed={this.state.speed}/>\n                <Layout>\n                    <GraphArea>\n                        <PetriNetGraph petriNet={this.props.petriNet}\n                                       locked={true}\n                                       maxZoom={1}\n                                       highlightedIds={this.highlightedIds()}\n                                       onClickOnElement={this.handleClickOnElement}>\n                            {this.renderAnimation()}\n                        </PetriNetGraph>\n                    </GraphArea>\n                    <Sider className=\"editor__sidebar\" width={300}>\n                        <div>\n                            <h5>Token based replay</h5>\n                            <div className=\"wrapper\">\n                                <br/>\n                                <h6 className=\"center\">Total</h6>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Produced:</p>\n                                    <p className=\"inline-right\">{this.state.produced}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Consumed:</p>\n                                    <p className=\"inline-right\">{this.state.consumed}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Missing: </p>\n                                    <p className=\"inline-right\">{this.state.missing}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Remaining: </p>\n                                    <p className=\"inline-right\">{this.state.remaining}</p>\n                                </div>\n                            </div>\n                            <div className=\"wrapper\">\n                                <br/>\n                                <h6 className=\"center\">Current trace</h6>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Produced:</p>\n                                    <p className=\"inline-right\">{this.state.curProduced}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Consumed:</p>\n                                    <p className=\"inline-right\">{this.state.curConsumed}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Missing: </p>\n                                    <p className=\"inline-right\">{this.state.curMissing}</p>\n                                </div>\n                                <div className=\"parent\">\n                                    <p className=\"inline-left\">Remaining: </p>\n                                    <p className=\"inline-right\">{this.state.curRemaining}</p>\n                                </div>\n                                {this.renderCurrentTraceInfo()}\n                            </div>\n                            {this.renderResult()}\n                        </div>\n                    </Sider>\n                </Layout>\n            </>\n        );\n    }\n\n    renderAnimation() {\n        if (this.state.selected === undefined) {\n            return null;\n        }\n\n        return <GraphAnimation elementId={this.state.selected}\n                               animation={TransitionAnimation}\n                               speed={this.state.animationSpeed}\n                               onEnd={this.handleAnimationEnd}/>\n    }\n}\n\nexport default Simulator;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {addTokens, fireTransition, resetMarkings} from '../actions';\nimport {getCurrentPetriNetId} from '../selectors';\nimport Simulator from '../components/Simulator';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: state.petriNetsById[getCurrentPetriNetId(ownProps)],\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onFireTransition: (transitionId) => dispatch(\n        fireTransition(getCurrentPetriNetId(ownProps), transitionId)\n    ),\n    onReset: () => dispatch(\n        resetMarkings(getCurrentPetriNetId(ownProps))\n    ),\n    onAddTokens: (transitionId) => dispatch(\n        addTokens(getCurrentPetriNetId(ownProps), transitionId)\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Simulator));\n","import React, {Component} from 'react';\nimport {Button, Input} from 'antd';\nimport './css/CreateBox.css';\n\nclass CreateBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''}\n    }\n\n    handleClickOnPlus = () => {\n        if (this.state.value !== '') {\n            this.props.onCreate(this.state.value);\n            this.setState({value: ''})\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n    }\n\n    render() {\n        let button = <Button type=\"default\" icon=\"plus\" onClick={this.handleClickOnPlus}/>\n        return (\n            <div className=\"create_box\">\n                <Input placeholder=\"Name\" value={this.state.value} onChange={this.handleChange} suffix={button}/>\n            </div>\n        )\n    }\n}\n\nexport default CreateBox;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {addPetriNet} from '../actions';\nimport CreateBox from '../components/CreateBox';\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onCreate: name => {\n        let action = addPetriNet(name);\n        dispatch(action);\n        ownProps.history.push('/' + action.petriNetId);\n    }\n});\n\nexport default withRouter(connect(\n    null,\n    mapDispatchToProps\n)(CreateBox));\n","import React, {Component} from 'react';\nimport {Menu} from 'antd';\n\nclass PetriNetMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(item) {\n        this.props.onSelect(item.key);\n    }\n\n    render() {\n        let petriNets = this.props.petriNets;\n        let selectedId = this.props.selectedId;\n        return (\n            <Menu theme=\"dark\" selectedKeys={['' + selectedId]} onClick={this.handleSelect}>\n                {petriNets.map(petriNet =>\n                    <Menu.Item key={petriNet.id}>{petriNet.name}</Menu.Item>\n                )}\n            </Menu>\n        );\n    }\n}\n\nexport default PetriNetMenu;\n","import React from \"react\";\nimport {Button} from \"antd\";\nimport './css/TraceItem.css';\n\nclass TraceItem extends React.Component {\n\n    state = {\n        number: \"1\"\n    };\n\n    onNumberChange = (event) => {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[1-9]?[0-9]{0,9}$\");\n\n        if (regexp.test(newValue)) {\n            this.setState({number: newValue});\n            this.props.onNumberChange(newValue);\n        }\n    };\n\n    onLostFocus = () => {\n        if (this.state.number === '') {\n            this.setState({number: '1'});\n        }\n    }\n\n    render() {\n        const {trace = 'abcd', onDeletion} = this.props;\n\n        return (\n            <div>\n                <span>\n                    {trace}\n                </span>\n                <div className=\"trace-item parent\">\n                    <Button type=\"danger\" icon=\"delete\" className=\"inline-right\" onClick={onDeletion}/>\n\n                    <input name=\"numberInput\" type='text' className=\"inline-right trace-item-number form-control\"\n                           placeholder='1' required\n                           onChange={this.onNumberChange}\n                           onBlur={this.onLostFocus}\n                           value={this.state.number}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TraceItem;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport PetriNetMenu from '../components/PetriNetMenu';\nimport {getPetriNets} from '../selectors';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNets: getPetriNets(state),\n    selectedId: ownProps.match.params.id,\n});\n\nconst mapDispatchToProps = (_, ownProps) => ({\n    onSelect: id => ownProps.history.push('/' + id),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PetriNetMenu));\n","import React, {Component} from 'react';\nimport TraceItem from \"./TraceItem\";\nimport {Notify} from 'notiflix/build/notiflix-notify-aio';\nimport './css/CaseTracesList.css';\n\nclass CaseTracesList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props.petriNet.traces = this.state.traces;\n    }\n\n    traceId = 0;\n\n    createTrace = (traceStr) => {\n        return {\n            key: this.traceId++,\n            trace: traceStr,\n            number: 1,\n            active: false,\n        };\n    }\n\n    state = {\n        traces: [],\n        text : ''\n    };\n\n    addItem = (traceStr) => {\n        const res = [...this.state.traces, this.createTrace(traceStr)];\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    deleteItem = (id) => {\n        const traces = this.state.traces;\n        const index = traces.findIndex((el) => el.key === id);\n        const res = [...traces.slice(0, index), ...traces.slice(index + 1)];\n\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    changeNumber = (id, number) => {\n        const traces = this.state.traces;\n        const index = traces.findIndex((el) => el.key === id);\n        const targetTrace = traces[index]\n        targetTrace.number = Number(number);\n        const res = [...traces.slice(0, index), targetTrace, ...traces.slice(index + 1)];\n\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    onLabelChange = (event) => {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[a-zA-Z]{0,15}$\");\n\n        if (regexp.test(newValue)) {\n            this.setState({ text: event.target.value });\n        }\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        const length = this.state.text.length;\n\n        if (length === 0) {\n            return;\n        } else if (length > 15) {\n            Notify.failure(\"Case trace is too long, max: 15\");\n            return;\n        } else if (this.state.traces.length > 25) {\n            Notify.failure(\"Too many case traces, max: 25\");\n            return;\n        }\n\n        this.addItem(this.state.text);\n        this.setState({text: '' });\n    };\n\n    render() {\n        const items = this.state.traces.map((item) => {\n            const { key: id, active, ...other } = item;\n            const color = active ? \"#90EE90\" : \"whitesmoke\";\n\n            return (\n                <li key={id} className=\"list-group-item\" style={{background: color}}>\n                    <TraceItem { ...other }\n                               onNumberChange={(number) => this.changeNumber(id, number)}\n                               onDeletion={() => this.deleteItem(id)}/>\n                </li>\n            );\n        });\n\n        return (\n            <div>\n                <h4 className=\"case-header\">\n                    Case traces\n                </h4>\n                <form className='d-flex' onSubmit={this.onSubmit}>\n                    <input type='text'\n                           className='form-control'\n                           style={{height: \"48px\"}}\n                           placeholder='Enter trace'\n                           onChange={this.onLabelChange}\n                           pattern='[a-zA-Z]*'\n                           value={this.state.text}/>\n\n                    <button className=\"btn btn-light\" style={{height: \"48px\"}}>\n                        Add\n                    </button>\n                </form>\n                <ul className=\"list-group\">\n                    {items}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CaseTracesList;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport CaseTracesList from '../components/CaseTracesList';\nimport {getCurrentPetriNet} from '../selectors';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: getCurrentPetriNet(state, ownProps)\n});\n\nconst mapDispatchToProps = (_, ownProps) => ({\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CaseTracesList));","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport CreateBoxContainer from '../containers/CreateBoxContainer';\nimport PetriNetMenuContainer from '../containers/PetriNetMenuContainer';\nimport CaseTracesListContainer from \"../containers/CaseTracesListContainer\";\n\nconst {Sider} = Layout;\n\nclass Sidebar extends Component {\n    render() {\n        // <CreateBoxContainer/>\n        // <PetriNetMenuContainer/>\n        return (\n            <Sider>\n                <CaseTracesListContainer/>\n            </Sider>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {Icon, Menu} from 'antd';\nimport './css/ModeMenu.css';\n\nclass ModeMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(item) {\n        this.props.history.push(`${item.key}`);\n    }\n\n    render() {\n        return (\n            <Menu className=\"mode_menu\"\n                  mode=\"horizontal\"\n                  onClick={this.handleSelect}\n                  selectedKeys={[this.selectedMode()]}\n                  theme=\"dark\">\n                <Menu.Item className=\"mode_menu__process_model\" key=\"edit\">\n                    <Icon theme=\"outlined\" type=\"edit\"/>Process model\n                </Menu.Item>\n                <Menu.Item className=\"mode_menu__run_algorithm\" key=\"simulate\">\n                    <Icon theme=\"outlined\" type=\"play-circle\"/>Run algorithm\n                </Menu.Item>\n            </Menu>\n        );\n    }\n\n    selectedMode() {\n        return this.props.match.params.mode;\n    }\n}\n\nexport default withRouter(ModeMenu);\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport ModeMenu from './ModeMenu';\nimport './css/Topbar.css';\n\nconst {Header} = Layout;\n\nclass Topbar extends Component {\n    render() {\n        return (\n            <Header className=\"topbar\">\n                <ModeMenu/>\n            </Header>\n        );\n    }\n}\n\nexport default Topbar;\n","import React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport {Layout} from 'antd';\nimport EditorContainer from '../containers/EditorContainer';\nimport SimulatorContainer from '../containers/SimulatorContainer';\nimport Sidebar from './Sidebar'\nimport Topbar from './Topbar';\nimport './css/App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Layout className=\"outer_layout\">\n                    <Sidebar/>\n                    <Layout>\n                        <Topbar/>\n                        <Route path=\"/:id/edit\" component={EditorContainer}/>\n                        <Route path=\"/:id/simulate\" component={SimulatorContainer}/>\n                    </Layout>\n                </Layout>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import {ADD_PETRI_NET} from '../actions';\n\nconst initialState = []\n\nconst petriNets = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_PETRI_NET:\n            return [\n                ...state,\n                action.petriNetId,\n            ];\n        default:\n            return state;\n    }\n};\n\nexport default petriNets;","import {ADD_EDGE, SET_WEIGHT, REMOVE_EDGE, REMOVE_NODE} from '../actions';\n\nconst edgesById = (state = {}, action) => {\n    switch (action.type) {\n        case ADD_EDGE:\n            return {\n                ...state,\n                [action.edgeId]: {\n                    id: action.edgeId,\n                    from: action.from,\n                    to: action.to,\n                    weight: 1,\n                },\n            };\n        case SET_WEIGHT:\n            return {\n                ...state,\n                [action.edgeId]: {\n                    ...state[action.edgeId],\n                    weight: action.weight,\n                },\n            };\n        case REMOVE_EDGE: {\n            const next = {...state};\n            delete (next[action.edgeId]);\n            return next;\n        }\n        case REMOVE_NODE: {\n            const next = {...state};\n            Object.values(state).forEach(edge => {\n                if (edge.from === action.nodeId || edge.to === action.nodeId) {\n                    delete (next[edge.id]);\n                }\n            });\n            return next;\n        }\n        default:\n            return state;\n    }\n};\n\nexport default edgesById;\n","import {\n    ADD_NODE, MOVE_NODE, REMOVE_NODE,\n    SET_LABEL, SET_CAPACITY_LIMIT, REMOVE_CAPACITY_LIMIT,\n} from '../actions';\n\nconst nodesById = (state = {}, action) => {\n    switch (action.type) {\n        case ADD_NODE:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    id: action.nodeId,\n                    type: action.nodeType,\n                    position: {\n                        ...action.position,\n                    },\n                },\n            };\n        case MOVE_NODE:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    ...state[action.nodeId],\n                    position: {\n                        ...action.position,\n                    },\n                },\n            };\n        case REMOVE_NODE: {\n            let next = {...state};\n            delete (next[action.nodeId]);\n            return next;\n        }\n        case SET_LABEL:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    ...state[action.nodeId],\n                    label: action.label,\n                },\n            };\n        case SET_CAPACITY_LIMIT:\n            return {\n                ...state,\n                [action.placeId]: {\n                    ...state[action.placeId],\n                    capacityLimit: action.capacityLimit,\n                },\n            };\n        case REMOVE_CAPACITY_LIMIT: {\n            let next = {...state};\n            delete (next[action.placeId].capacityLimit);\n            return next;\n        }\n        default:\n            return state;\n    }\n};\n\nexport default nodesById;\n","import {\n    ADD_NODE, REMOVE_NODE, SET_CAPACITY_LIMIT,\n    SET_INITIAL_NUMBER_OF_TOKENS, RESET_MARKINGS\n} from '../actions';\n\nconst markings = (state = [{}], action) => {\n    switch (action.type) {\n        case ADD_NODE:\n            return state.map(marking => ({\n                ...marking,\n                [action.nodeId]: 0,\n            }));\n        case REMOVE_NODE:\n            return state.map(marking => {\n                let mapped = {...marking};\n                delete (mapped[action.nodeId]);\n                return mapped;\n            });\n        case SET_CAPACITY_LIMIT:\n            return state.map(marking => {\n                if (marking[action.placeId] <= action.capacityLimit) {\n                    return marking;\n                }\n                return {\n                    ...marking,\n                    [action.placeId]: action.capacityLimit,\n                };\n            });\n        case SET_INITIAL_NUMBER_OF_TOKENS: {\n            let next = [...state];\n            next[0] = {\n                ...state[0],\n                [action.placeId]: action.numberOfTokens,\n            };\n            return next;\n        }\n        case RESET_MARKINGS:\n            return [\n                state[0],\n            ]\n        default:\n            return state;\n    }\n};\n\nexport default markings;\n","import edgesById from './edgesById';\nimport nodesById from './nodesById';\nimport markings from './markings';\nimport {ADD_TOKENS, FIRE_TRANSITION} from '../actions';\nimport {\n    getIncomingEdges,\n    getOutgoingEdges,\n} from '../selectors/petriNet';\n\nconst petriNet = (state, action) => {\n    switch (action.type) {\n        case FIRE_TRANSITION: {\n            let nextMarking = {...state.markings[state.markings.length - 1]};\n\n            const incoming = getIncomingEdges(state, action.transitionId);\n            incoming.forEach(edge => nextMarking[edge.from] -= edge.weight);\n\n            const outgoing = getOutgoingEdges(state, action.transitionId);\n            outgoing.forEach(edge => nextMarking[edge.to] += edge.weight);\n\n            return {\n                ...state,\n                markings: [\n                    ...state.markings,\n                    nextMarking,\n                ]\n            }\n        }\n        case ADD_TOKENS: {\n            const edges = getIncomingEdges(state, action.transitionId);\n            edges.forEach(edge => {\n                state.markings[state.markings.length - 1][edge.from] = edge.weight;\n            });\n\n            return {\n                ...state,\n                markings: [\n                    ...state.markings,\n                ]\n            }\n        }\n        default: {\n            let next = {\n                ...state,\n                edgesById: edgesById(state['edgesById'], action),\n                nodesById: nodesById(state['nodesById'], action),\n                markings: markings(state['markings'], action),\n            };\n            let unchanged =\n                next.edgesById === state.edgesById &&\n                next.nodesById === state.nodesById &&\n                next.markings === state.markings;\n            if (unchanged) {\n                return state;\n            }\n            return next;\n        }\n    }\n};\n\nexport default petriNet;\n","import petriNet from './petriNet';\nimport {ADD_PETRI_NET} from '../actions';\n\nconst initialState = {};\n\nconst petriNetsByIds = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_PETRI_NET:\n            return {\n                ...state,\n                [action.petriNetId]: {\n                    id: action.petriNetId,\n                    name: action.name,\n                    edgesById: {},\n                    nodesById: {},\n                    markings: [{}],\n                },\n            };\n        default: {\n            if (action.petriNetId === undefined) {\n                return state;\n            }\n\n            let petriNetState = state[action.petriNetId];\n            let reducedState = petriNet(state[action.petriNetId], action);\n            if (petriNetState === reducedState) {\n                return state;\n            }\n\n            return {\n                ...state,\n                [action.petriNetId]: reducedState,\n            };\n        }\n    }\n};\n\nexport default petriNetsByIds;\n","import {combineReducers} from 'redux';\nimport petriNets from './petriNets';\nimport petriNetsById from './petriNetsById';\n\nexport default combineReducers({\n    petriNets,\n    petriNetsById,\n});\n","const examplePetriNetId = '87b6487b-5781-477e-8398-e2d8c36000be';\nexport default {\n    petriNets: [examplePetriNetId],\n    petriNetsById: {\n        [examplePetriNetId]: {\n            id: examplePetriNetId,\n            name: 'Sample process model',\n            edgesById: {},\n            nodesById: {},\n            markings: [{}],\n            traces: [],\n        },\n    },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Redirect, HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport App from './components/App';\nimport rootReducer from './reducers';\nimport inititalState from './initialState';\nimport './index.css';\n\nconst store = createStore(rootReducer, inititalState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                <Route path=\"/:id/:mode(edit|simulate)\" component={App}/>\n                <Redirect from=\"/:id\" to=\"/:id/edit\"/>\n                <Redirect to={`/${store.getState().petriNets[0]}/edit`}/>\n            </Switch>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}