{"version":3,"sources":["images/one-token.svg","images/two-tokens.svg","images/three-tokens.svg","images/four-tokens.svg","images/five-tokens.svg","images/six-tokens.svg","images/seven-tokens.svg","images/eight-tokens.svg","images/nine-tokens.svg","actions/index.js","selectors/index.js","constants/nodeTypes.js","components/Toolbar.js","components/EditorToolbar.js","components/EdgeForm.js","containers/EdgeFormContainer.js","components/PlaceForm.js","selectors/petriNet.js","containers/PlaceFormContainer.js","components/TransitionForm.js","containers/TransitionFormContainer.js","components/ElementForm.js","constants/elementTypes.js","components/Delayed.js","components/GraphArea.js","utils/ElementCfgFactory.js","utils/PetriNetToElementCfgsMapper.js","contexts/CytoscapeContext.js","components/EdgeHandles.js","utils/changeDetector.js","components/StaticDiv.js","components/Graph.js","components/PetriNetGraphStyle.js","components/PetriNetGraph.js","components/Editor.js","containers/EditorContainer.js","animations/TokenFlowAnimation.js","utils/bezierCurve.js","animations/BezierCurveTokenFlowAnimation.js","animations/LinearTokenFlowAnimation.js","animations/TokenFlowAnimationFactory.js","animations/TransitionAnimation.js","components/GraphAnimation.js","components/SimulatorToolbar.js","components/Simulator.js","containers/SimulatorContainer.js","components/CreateBox.js","containers/CreateBoxContainer.js","components/PetriNetMenu.js","containers/PetriNetMenuContainer.js","components/TraceItem.js","components/CaseTracesList.js","containers/CaseTracesListContainer.js","components/Sidebar.js","components/ModeMenu.js","components/Topbar.js","components/App.js","reducers/petriNets.js","reducers/edgesById.js","reducers/nodesById.js","reducers/markings.js","reducers/petriNet.js","reducers/petriNetsById.js","reducers/index.js","initialState.js","index.js"],"names":["module","exports","__webpack_require__","p","removeNode","petriNetId","nodeId","type","setLabel","label","getCurrentPetriNet","state","props","getPetriNet","getCurrentPetriNetId","match","params","id","petriNetsById","TRANSITION","Header","Layout","Toolbar","react_default","a","createElement","className","style","backgroundColor","this","children","Component","EditorToolbar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","onNodeTypeChange","target","value","bind","assertThisInitialized","activeNodeType","components_Toolbar","es_radio","Group","onChange","buttonStyle","Button","nodeType","EdgeForm","Fragment","es_form","layout","Item","input_number","min","weight","onWeightChange","es_button","icon","block","onClick","onDelete","withRouter","connect","ownProps","edgesById","edgeId","dispatch","setWeight","PlaceForm","newValue","RegExp","test","console","log","setState","number","onNumberOfTokensChange","handleLabelChange","onLabelChange","input","placeholder","numberOfTokens","getIncomingEdges","values","filter","edge","to","getOutgoingEdges","from","getNumberOfTokens","placeId","markings","length","getActiveTransitions","nodesById","node","nodeTypes","transition","some","place","undefined","capacityLimit","canTakeTokens","petriNet","onCapacityLimitChange","capacity","removeCapacityLimit","setCapacityLimit","getCapacityLimitChangeAction","setInitialNumberOfTokens","TransitionForm","color","transitionId","EditorSidebar","elementType","renderEdgeForm","renderNodeForm","EdgeFormContainer","element","renderPlaceForm","renderTransitionForm","PlaceFormContainer","TransitionFormContainer","Delayed","display","_this2","setTimeout","Content","GraphArea","components_Delayed","ElementCfgFactory","cacheOptions","primitive","max","_edgeCfg","memoizee","_nodeCfg","source","selected","selectable","grabbable","group","data","_ref","_ref$weight","_ref$selected","_ref$selectable","_ref$grabbable","x","y","classes","position","_ref2","_ref2$position","_ref2$selected","_ref2$selectable","_ref2$grabbable","elementByIdReducer","obj","PetriNetToElementCfgsMapper","factory","selectedId","_ref$highlightedIds","highlightedIds","_ref$locked","locked","isHighlighted","indexOf","isSelected","nodeCfgsById","map","nodeCfg","reduce","nodeLabel","parts","push","concat","join","nodeNumberOfTokens","edgeCfg","objectSpread","edgeCfgsById","nodeClasses","CytoscapeContext","React","createContext","cytoscape","use","edgehandles","EdgeHandles","componentDidMount","initEdgeHandles","componentDidUpdate","edgeParams","edgeType","handleComplete","sourceNode","targetNode","shouldAddEdge","onAddEdge","context","destroy","complete","snap","same","handleNode","PureComponent","contextType","keyToValueMapper","callback","key","compareByValue","prev","current","onAdd","onRemove","onRemain","added","val","removed","subsisted","forEach","changeDetector","keys","StaticDiv","_this$props","divRef","rest","objectWithoutProperties","assign","ref","Graph","handleClick","cy","callCallback","onClickOnElement","onClickOnBackground","handleFree","hasNodeMoved","onMove","handleGrab","select","handleSelect","onSelect","handleUnselect","onUnselect","cyContainerRef","createRef","add","cloneDeep","_len","arguments","args","Array","_key","apply","initCytoscape","setLoaded","updateCytoscape","elements","first","Error","loadedPosition","loaded","elementsById","container","maxZoom","on","findElement","remove","components_StaticDiv","contexts_CytoscapeContext","Provider","updateElements","updateOptions","json","updateElement","addElement","removeElement","_this3","updateOption","fontFamily","cachedImages","getImageWithNumber","svg","encodeURIComponent","generateImageWithNumber","tokenImages","oneToken","twoTokens","threeTokens","fourTokens","fiveTokens","sixTokens","sevenTokens","eightTokens","nineTokens","PetriNetGraphStyle","selector","font-size","font-family","border-color","border-width","text-valign","text-halign","text-margin-y","background-color","background-fit","height","width","background-image","getBackgroundImageOfPlace","shape","target-arrow-shape","line-color","target-arrow-color","curve-style","opacity","PetriNetGraph","render","components_Graph","petriNetGraphStyle","renderEdgeHandles","elementCfgFactory","name","fromNode","toNode","components_EdgeHandles","Sider","Editor","handleAddEdge","handleClickOnBackground","handleNodeTypeChange","uuidv4","onAddNode","components_EditorToolbar","components_GraphArea","components_PetriNetGraph","renderSidebar","getSelectedElement","ElementForm","addEdge","addNode","moveNode","TokenFlowAnimation","edgeElement","token","addToken","animateToken","removeToken","sourceEndpoint","valueAt","p0","p1","p2","t","bezierCurve","BezierCurveTokenFlowAnimation","controlPoints","targetEndpoint","i","numberOfSteps","animate","pointOnBezierCurve","duration","animation","queue","play","promise","LinearTokenFlowAnimation","TokenFlowAnimationFactory","isBezierCurve","TransitionAnimation","transitionElement","canceled","animateTokenFlowOfEdge","Promise","resolve","promises","incomers","animateIncomingEdge","all","outgoers","animateOutgoingEdge","animateIncomingEdges","animateOutgoingEdges","GraphAnimation","elementId","onEnd","cancel","SimulatorToolbar","onRun","onRunStep","onReset","Simulator","isFinished","traces","traceIdx","updateState","currentTrace","pos","trace","active","activeTransitions","handleClickOnElement","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","next","wait","stop","handleAnimationEnd","onFireTransition","isTransitionActive","activeTransitionIds","sleep","ms","r","components_SimulatorToolbar","renderAnimation","components_GraphAnimation","fireTransition","CreateBox","handleClickOnPlus","onCreate","button","suffix","action","addPetriNet","history","PetriNetMenu","item","petriNets","menu","theme","selectedKeys","getPetriNets","_","TraceItem","onNumberChange","onLostFocus","_this$props$trace","onDeletion","required","onBlur","CaseTracesList","traceId","createTrace","traceStr","text","addItem","res","toConsumableArray","deleteItem","index","findIndex","el","slice","changeNumber","targetTrace","Number","onSubmit","preventDefault","Notify","failure","items","other","background","components_TraceItem","marginTop","marginBottom","marginLeft","pattern","Sidebar","Sidebar_Sider","CaseTracesListContainer","ModeMenu","mode","selectedMode","Topbar","Topbar_Header","components_ModeMenu","App","components_Sidebar","components_Topbar","Route","path","component","EditorContainer","SimulatorContainer","initialState","defineProperty","marking","mapped","nextMarking","petriNetsByIds","petriNetState","reducedState","combineReducers","examplePetriNetId","src_initialState","store","createStore","rootReducer","inititalState","ReactDOM","es","BrowserRouter","Switch","Redirect","getState","document","getElementById"],"mappings":"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","file":"static/js/main.4b14e7e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/one-token.a3314b8b.svg\";","module.exports = __webpack_public_path__ + \"static/media/two-tokens.8a98c32b.svg\";","module.exports = __webpack_public_path__ + \"static/media/three-tokens.0ebc35c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/four-tokens.da8b9d75.svg\";","module.exports = __webpack_public_path__ + \"static/media/five-tokens.7240809b.svg\";","module.exports = __webpack_public_path__ + \"static/media/six-tokens.9b88cbc0.svg\";","module.exports = __webpack_public_path__ + \"static/media/seven-tokens.d7817d9b.svg\";","module.exports = __webpack_public_path__ + \"static/media/eight-tokens.a52db80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/nine-tokens.e2e95f09.svg\";","import uuidv4 from 'uuid/v4';\n\nexport const ADD_PETRI_NET = 'ADD_PETRI_NET';\nexport const ADD_EDGE = 'ADD_EDGE';\nexport const SET_WEIGHT = 'SET_WEIGHT';\nexport const REMOVE_EDGE = 'REMOVE_EDGE';\nexport const ADD_NODE = 'ADD_NODE';\nexport const MOVE_NODE = 'MOVE_NODE';\nexport const REMOVE_NODE = 'REMOVE_NODE';\nexport const SET_LABEL = 'SET_LABEL';\nexport const SET_CAPACITY_LIMIT = 'SET_CAPACITY_LIMIT';\nexport const REMOVE_CAPACITY_LIMIT = 'REMOVE_CAPACITY_LIMIT';\nexport const SET_INITIAL_NUMBER_OF_TOKENS = 'SET_INITIAL_NUMBER_OF_TOKENS';\nexport const RESET_MARKINGS = 'RESET_MARKINGS';\nexport const FIRE_TRANSITION = 'FIRE_TRANSITIONS';\n\nexport const addPetriNet = name => ({\n    type: ADD_PETRI_NET,\n    petriNetId: uuidv4(),\n    name,\n});\n\nexport const addEdge = (petriNetId, from, to) => ({\n    type: ADD_EDGE,\n    petriNetId,\n    edgeId: `${from}_${to}`,\n    from,\n    to,\n});\n\nexport const setWeight = (petriNetId, edgeId, weight) => ({\n    type: SET_WEIGHT,\n    petriNetId,\n    edgeId,\n    weight,\n});\n\nexport const removeEdge = (petriNetId, edgeId) => ({\n    type: REMOVE_EDGE,\n    petriNetId,\n    edgeId,\n});\n\nexport const addNode = (petriNetId, nodeId, nodeType, position) => ({\n    type: ADD_NODE,\n    petriNetId,\n    nodeId,\n    nodeType,\n    position,\n});\n\nexport const moveNode = (petriNetId, nodeId, position) => ({\n    type: MOVE_NODE,\n    petriNetId,\n    nodeId,\n    position,\n});\n\nexport const removeNode = (petriNetId, nodeId) => ({\n    type: REMOVE_NODE,\n    petriNetId,\n    nodeId,\n});\n\nexport const setLabel = (petriNetId, nodeId, label) => ({\n    type: SET_LABEL,\n    petriNetId,\n    nodeId,\n    label,\n});\n\nexport const setCapacityLimit = (petriNetId, placeId, capacityLimit) => ({\n    type: SET_CAPACITY_LIMIT,\n    petriNetId,\n    placeId,\n    capacityLimit,\n});\n\nexport const removeCapacityLimit = (petriNetId, placeId) => ({\n    type: REMOVE_CAPACITY_LIMIT,\n    petriNetId,\n    placeId,\n});\n\nexport const setInitialNumberOfTokens = (petriNetId, placeId, numberOfTokens) => ({\n    type: SET_INITIAL_NUMBER_OF_TOKENS,\n    petriNetId,\n    placeId,\n    numberOfTokens,\n});\n\nexport const resetMarkings = (petriNetId) => ({\n    type: RESET_MARKINGS,\n    petriNetId,\n});\n\nexport const fireTransition = (petriNetId, transitionId) => ({\n    type: FIRE_TRANSITION,\n    petriNetId,\n    transitionId,\n});\n","export const getCurrentPetriNet = (state, props) => (\n    getPetriNet(state, getCurrentPetriNetId(props))\n);\n\nexport const getCurrentPetriNetId = (props) => (\n    props.match.params.id\n);\n\nexport const getPetriNet = (state, id) => (\n    state.petriNetsById[id]\n);\n\nexport const getPetriNets = (state) => (\n    state.petriNets.map(id => state.petriNetsById[id])\n);\n","export const PLACE = 'place';\nexport const TRANSITION = 'transition';\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport './css/Toolbar.css';\n\nconst {Header} = Layout;\n\nclass Toolbar extends Component {\n    render() {\n        return (\n            <Header className=\"toolbar\" style={{backgroundColor: this.props.backgroundColor}}>\n                {this.props.children}\n            </Header>\n        )\n    }\n}\n\nexport default Toolbar;\n","import React, {Component} from 'react';\nimport {Radio} from 'antd';\nimport * as nodeType from '../constants/nodeTypes';\nimport Toolbar from './Toolbar';\n\nclass EditorToolbar extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange = (event) => {\n        this.props.onNodeTypeChange(event.target.value);\n    }\n\n    render() {\n        let activeNodeType = this.props.activeNodeType;\n        return (\n            <Toolbar backgroundColor=\"#008B27\">\n                <Radio.Group value={activeNodeType} onChange={this.handleChange} buttonStyle=\"solid\">\n                    <Radio.Button value={nodeType.TRANSITION}>\n                        Transition\n                    </Radio.Button>\n                    <Radio.Button value={nodeType.PLACE}>\n                        Place\n                    </Radio.Button>\n                </Radio.Group>\n            </Toolbar>\n        )\n    }\n}\n\nexport default EditorToolbar;\n","import React, {Component} from 'react';\nimport {Button, Form, InputNumber} from 'antd';\n\nclass EdgeForm extends Component {\n    render() {\n        return (\n            <>\n                <h2>Edge</h2>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"Weight\">\n                        <InputNumber id=\"weight\"\n                                     min={1}\n                                     value={this.props.weight}\n                                     onChange={this.props.onWeightChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default EdgeForm;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {setWeight, removeEdge} from '../actions';\nimport {getCurrentPetriNetId} from '../selectors';\nimport EdgeForm from '../components/EdgeForm';\n\nconst mapStateToProps = (state, ownProps) => {\n    const edge = state.petriNetsById[getCurrentPetriNetId(ownProps)].edgesById[ownProps.edgeId]\n    return {\n        weight: edge.weight,\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onWeightChange: weight => (\n        dispatch(setWeight(getCurrentPetriNetId(ownProps), ownProps.edgeId, weight))\n    ),\n    onDelete: () => (\n        dispatch(removeEdge(getCurrentPetriNetId(ownProps), ownProps.edgeId))\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EdgeForm));\n","import React, {Component} from 'react';\nimport {Button, Form, Input, InputNumber} from 'antd';\n\nclass PlaceForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleLabelChange = this.handleLabelChange.bind(this);\n    }\n\n    handleLabelChange(event) {\n        this.props.onLabelChange(event.target.value);\n    }\n\n    onChange = (newValue) => {\n        const regexp = new RegExp(\"^[1-9]?[0-9]{0,3}$\");\n\n        if (regexp.test(newValue)) {\n            console.log(newValue);\n            this.setState({number: newValue});\n            this.props.onNumberOfTokensChange(newValue);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Place</h2>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"\">\n                        <Input id=\"label\" placeholder=\"Enter name\"\n                               value={this.props.label}\n                               onChange={this.handleLabelChange}/>\n                    </Form.Item>\n                    <Form.Item label=\"Initial number of tokens\">\n                        <InputNumber id=\"numberOfTokens\"\n                                     min={0}\n                                     value={this.props.numberOfTokens}\n                                     onChange={this.onChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default PlaceForm;\n","import * as nodeTypes from '../constants/nodeTypes';\n\nexport const getIncomingEdges = (state, nodeId) => (\n    Object.values(state.edgesById).filter(edge => edge.to === nodeId)\n);\n\nexport const getOutgoingEdges = (state, nodeId) => (\n    Object.values(state.edgesById).filter(edge => edge.from === nodeId)\n);\n\nexport const getNumberOfTokens = (state, placeId) => (\n    state.markings[state.markings.length - 1][placeId]\n);\n\nconst canTakeTokens = (state, placeId, numberOfTokens) => {\n    const place = state.nodesById[placeId];\n    if (place.capacityLimit === undefined) {\n        return true;\n    }\n    const leftCapacity = place.capacityLimit - getNumberOfTokens(state, placeId);\n    return leftCapacity >= numberOfTokens;\n};\n\nexport const getActiveTransitions = (state) => {\n    const all = Object.values(state.nodesById)\n        .filter(node => node.type === nodeTypes.TRANSITION);\n    return all.filter(transition => {\n        const incoming = getIncomingEdges(state, transition.id);\n        if (incoming.some((edge) => edge.weight > getNumberOfTokens(state, edge.from))) {\n            return false;\n        }\n\n        let outgoing = getOutgoingEdges(state, transition.id);\n        return !outgoing.some((edge) => !canTakeTokens(state, edge.to, edge.weight));\n    });\n};\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {\n    removeNode, setLabel,\n    setCapacityLimit, removeCapacityLimit, setInitialNumberOfTokens\n} from '../actions';\nimport PlaceForm from '../components/PlaceForm';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors/index';\nimport {getNumberOfTokens} from '../selectors/petriNet';\n\nconst mapStateToProps = (state, ownProps) => {\n    const petriNet = getCurrentPetriNet(state, ownProps);\n    const place = petriNet.nodesById[ownProps.placeId]\n    return {\n        label: place.label,\n        capacityLimit: place.capacityLimit,\n        numberOfTokens: getNumberOfTokens(petriNet, ownProps.placeId),\n    };\n};\n\nconst getCapacityLimitChangeAction = (props, capacity) => {\n    const petriNetId = getCurrentPetriNetId(props);\n    if (capacity === undefined || capacity === null || capacity === '') {\n        return removeCapacityLimit(\n            petriNetId,\n            props.placeId\n        );\n    } else {\n        return setCapacityLimit(\n            petriNetId,\n            props.placeId,\n            capacity\n        );\n    }\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onLabelChange: label => (\n        dispatch(\n            setLabel(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId,\n                label\n            )\n        )\n    ),\n    onCapacityLimitChange: capacity => (\n        dispatch(\n            getCapacityLimitChangeAction(\n                ownProps,\n                capacity\n            )\n        )\n    ),\n    onNumberOfTokensChange: numberOfTokens => (\n        dispatch(\n            setInitialNumberOfTokens(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId,\n                numberOfTokens || 0\n            )\n        )\n    ),\n    onDelete: () => (\n        dispatch(\n            removeNode(\n                getCurrentPetriNetId(ownProps),\n                ownProps.placeId\n            )\n        )\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PlaceForm));\n","import React, {Component} from 'react';\nimport {Button, Form, Input} from 'antd';\n\nclass TransitionForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleLabelChange = this.handleLabelChange.bind(this);\n    }\n\n    handleLabelChange(event) {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[a-zA-Z]?$\");\n\n        if (regexp.test(newValue)) {\n            this.props.onLabelChange(event.target.value);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <h2>Transition</h2>\n                <Form layout=\"vertical\">\n                    <p style={{color: \"darkred\"}}>Transition name should correspond to trace event</p>\n                    <Form.Item label=\"\">\n                        <Input id=\"label\" placeholder=\"Enter name\"\n                               value={this.props.label}\n                               onChange={this.handleLabelChange}/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button id=\"delete\"\n                                type=\"danger\"\n                                icon=\"delete\"\n                                block\n                                onClick={this.props.onDelete}>\n                            Delete\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </>\n        );\n    }\n}\n\nexport default TransitionForm;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {removeNode, setLabel} from '../actions';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors';\nimport TransitionForm from '../components/TransitionForm';\n\nconst mapStateToProps = (state, ownProps) => {\n    const petriNet = getCurrentPetriNet(state, ownProps);\n    const transition = petriNet.nodesById[ownProps.transitionId]\n    return {\n        label: transition.label,\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onLabelChange: label => (\n        dispatch(\n            setLabel(\n                getCurrentPetriNetId(ownProps),\n                ownProps.transitionId,\n                label\n            )\n        )\n    ),\n    onDelete: () => (\n        dispatch(\n            removeNode(\n                getCurrentPetriNetId(ownProps),\n                ownProps.transitionId\n            )\n        )\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TransitionForm));\n","import React, {Component} from 'react';\nimport * as elementType from '../constants/elementTypes';\nimport * as nodeType from '../constants/nodeTypes';\nimport EdgeFormContainer from '../containers/EdgeFormContainer';\nimport PlaceFormContainer from '../containers/PlaceFormContainer';\nimport TransitionFormContainer from '../containers/TransitionFormContainer';\n\nclass EditorSidebar extends Component {\n    render() {\n        switch (this.props.elementType) {\n            case elementType.EDGE:\n                return this.renderEdgeForm();\n            case elementType.NODE:\n                return this.renderNodeForm();\n            default:\n                return null;\n        }\n    }\n\n    renderEdgeForm() {\n        return <EdgeFormContainer edgeId={this.props.element.id}/>\n    }\n\n    renderNodeForm() {\n        switch (this.props.element.type) {\n            case nodeType.PLACE:\n                return this.renderPlaceForm();\n            case nodeType.TRANSITION:\n                return this.renderTransitionForm();\n            default:\n                return null;\n        }\n    }\n\n    renderPlaceForm() {\n        return <PlaceFormContainer placeId={this.props.element.id}/>\n    }\n\n    renderTransitionForm() {\n        return <TransitionFormContainer transitionId={this.props.element.id}/>\n    }\n}\n\nexport default EditorSidebar;\n","export const EDGE = 'EDGE';\nexport const NODE = 'NODE';\n","import React, {Component} from 'react';\n\nclass Delayed extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {display: false}\n    }\n\n    componentDidMount() {\n        setTimeout(() => this.setState({display: true}), 0);\n    }\n\n    render() {\n        if (this.state.display === false) {\n            return null;\n        }\n\n        return (\n            <>\n                {this.props.children}\n            </>\n        )\n    }\n}\n\nexport default Delayed;\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport Delayed from './Delayed';\nimport './css/GraphArea.css';\n\nconst {Content} = Layout;\n\nclass GraphArea extends Component {\n    render() {\n        return (\n            <Content className=\"graph_area\">\n                <Delayed>\n                    {this.props.children}\n                </Delayed>\n            </Content>\n        )\n    }\n}\n\nexport default GraphArea;\n","import memoizee from 'memoizee';\n\nclass ElementCfgFactory {\n    constructor() {\n        const cacheOptions = {primitive: true, max: 100};\n        this._edgeCfg = memoizee(this._edgeCfg, cacheOptions);\n        this._nodeCfg = memoizee(this._nodeCfg, cacheOptions);\n    }\n\n    _edgeCfg(id, source, target, weight, selected, selectable, grabbable) {\n        return {\n            group: \"edges\",\n            data: {id, source, target, weight},\n            selected,\n            selectable,\n            grabbable,\n        };\n    }\n\n    edgeCfg({id, source, target, weight = 1, selected = false, selectable = true, grabbable = true}) {\n        return this._edgeCfg(id, source, target, weight, selected, selectable, grabbable)\n    }\n\n    _nodeCfg(id, type, label, numberOfTokens, x, y, selected, selectable, grabbable, classes) {\n        return {\n            group: \"nodes\",\n            data: {id, type, label, numberOfTokens},\n            position: {x, y},\n            selected,\n            selectable,\n            grabbable,\n            classes,\n        };\n    }\n\n    nodeCfg({\n                id,\n                type,\n                label,\n                numberOfTokens,\n                position: {x, y},\n                selected = false,\n                selectable = true,\n                grabbable = true,\n                classes\n            }) {\n        return this._nodeCfg(id, type, label, numberOfTokens, x, y, selected, selectable, grabbable, classes);\n    }\n}\n\nexport default ElementCfgFactory;\n","import {getNumberOfTokens} from '../selectors/petriNet';\n\nconst elementByIdReducer = (obj, element) => {\n    obj[element.data.id] = element;\n    return obj;\n};\n\nclass PetriNetToElementCfgsMapper {\n    constructor(petriNet, factory, {selectedId, highlightedIds = [], locked = false}) {\n        this.petriNet = petriNet;\n        this.factory = factory;\n        this.selectedId = selectedId;\n        this.highlightedIds = highlightedIds;\n        this.locked = locked;\n    }\n\n    edgeCfg(edge) {\n        return this.factory.edgeCfg({\n            id: edge.id,\n            source: edge.from,\n            target: edge.to,\n            weight: edge.weight,\n            selected: this.isSelected(edge.id),\n            selectable: !this.locked,\n            grabbable: !this.locked,\n        });\n    }\n\n    edgeCfgsById() {\n        const edges = Object.values(this.petriNet.edgesById);\n        return edges.map(this.edgeCfg.bind(this)).reduce(elementByIdReducer, {});\n    }\n\n    isHighlighted = (id) => {\n        return this.highlightedIds.indexOf(id) !== -1;\n    }\n\n    isSelected = (id) => {\n        return this.selectedId === id;\n    }\n\n    map() {\n        return {\n            ...this.nodeCfgsById(),\n            ...this.edgeCfgsById(),\n        }\n    }\n\n    nodeCfg(node) {\n        return this.factory.nodeCfg({\n            id: node.id,\n            type: node.type,\n            label: this.nodeLabel(node),\n            numberOfTokens: this.nodeNumberOfTokens(node),\n            position: node.position,\n            selected: this.isSelected(node.id),\n            selectable: !this.locked,\n            grabbable: !this.locked,\n            classes: this.nodeClasses(node),\n        });\n    }\n\n    nodeCfgsById = () => {\n        const nodes = Object.values(this.petriNet.nodesById);\n        return nodes.map(this.nodeCfg.bind(this)).reduce(elementByIdReducer, {});\n    }\n\n    nodeClasses(node) {\n        const classes = [node.type];\n        if (this.isHighlighted(node.id)) {\n            classes.push('highlighted');\n        }\n        return classes.join(' ');\n    }\n\n    nodeLabel = (node) => {\n        let parts = [];\n        if (node.label !== undefined && node.label.length > 0) {\n            parts.push(node.label);\n        }\n        if (node.capacityLimit !== undefined) {\n            parts.push(`(max. ${node.capacityLimit})`);\n        }\n        return parts.join(' ');\n    }\n\n    nodeNumberOfTokens = (node) => (\n        getNumberOfTokens(this.petriNet, node.id)\n    )\n}\n\nexport default PetriNetToElementCfgsMapper;\n","import React from 'react';\n\nconst CytoscapeContext = React.createContext();\n\nexport default CytoscapeContext;\n","import {PureComponent} from 'react';\nimport cytoscape from 'cytoscape';\nimport edgehandles from 'cytoscape-edgehandles';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\n\ncytoscape.use(edgehandles);\n\nclass EdgeHandles extends PureComponent {\n    static contextType = CytoscapeContext;\n\n    constructor(props) {\n        super(props);\n        this.edgeParams = this.edgeParams.bind(this);\n        this.edgeType = this.edgeType.bind(this);\n        this.handleComplete = this.handleComplete.bind(this);\n    }\n\n    componentDidMount = () => {\n        this.initEdgeHandles();\n    }\n\n    componentDidUpdate = () => {\n        this.initEdgeHandles();\n    }\n\n    edgeParams(sourceNode, targetNode) {\n        return this.props.edgeParams(sourceNode.id(), targetNode.id());\n    }\n\n    edgeType(sourceNode, targetNode) {\n        if (this.shouldAddEdge(sourceNode, targetNode)) {\n            return 'flat';\n        }\n        return;\n    }\n\n    handleComplete(sourceNode, targetNode) {\n        this.props.onAddEdge(sourceNode.id(), targetNode.id());\n    }\n\n    initEdgeHandles() {\n        if (this.context === undefined) {\n            return;\n        }\n        if (this.edgehandles !== undefined) {\n            this.edgehandles.destroy();\n        }\n\n        this.edgehandles = this.context.edgehandles({\n            complete: this.handleComplete,\n            edgeParams: this.edgeParams,\n            edgeType: this.edgeType,\n            snap: this.props.snap,\n        });\n    }\n\n    render() {\n        return null;\n    }\n\n    shouldAddEdge(sourceNode, targetNode) {\n        if (targetNode.length === 0) {\n            return false;\n        }\n        if (targetNode.same(this.edgehandles.handleNode)) {\n            return false;\n        }\n\n        return this.props.shouldAddEdge(sourceNode.id(), targetNode.id());\n    }\n}\n\nexport default EdgeHandles;\n","const keyToValueMapper = (callback, obj) => {\n    if (callback === undefined) {\n        return;\n    }\n    return (key) => callback(obj[key]);\n};\n\nexport const compareByKey = ({prev, current, onAdd, onRemove, onRemain}) => {\n    compareByValue({\n        prev: Object.keys(prev),\n        current: Object.keys(current),\n        onAdd: keyToValueMapper(onAdd, current),\n        onRemove: keyToValueMapper(onRemove, prev),\n        onRemain: keyToValueMapper(onRemain, current),\n    });\n};\n\nexport const compareByValue = ({prev, current, onAdd, onRemove, onRemain}) => {\n    const added = current.filter(val => prev.indexOf(val) === -1);\n    const removed = prev.filter(val => current.indexOf(val) === -1);\n    const subsisted = current.filter(val => added.indexOf(val) === -1);\n\n    if (onAdd !== undefined) {\n        added.forEach(val => onAdd(val));\n    }\n    if (onRemove !== undefined) {\n        removed.forEach(val => onRemove(val));\n    }\n    if (onRemain !== undefined) {\n        subsisted.forEach(val => onRemain(val));\n    }\n};\n\nexport default {\n    compareByKey,\n    compareByValue,\n};\n","import React, {Component} from 'react';\n\nclass StaticDiv extends Component {\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        const {divRef, ...rest} = this.props;\n\n        return (\n            <div ref={divRef} {...rest} />\n        );\n    }\n}\n\nexport default StaticDiv;\n","import React, {PureComponent} from 'react';\nimport cytoscape from 'cytoscape';\nimport cloneDeep from 'lodash/cloneDeep';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\nimport changeDetector from '../utils/changeDetector';\nimport * as elementType from '../constants/elementTypes';\nimport StaticDiv from './StaticDiv';\nimport './css/Graph.css';\n\nclass Graph extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.cyContainerRef = React.createRef();\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    addElement(params) {\n        this.cy.add(cloneDeep(params));\n    }\n\n    callCallback(callback, ...args) {\n        if (callback === undefined) {\n            return;\n        }\n        callback(...args);\n    }\n\n    componentDidMount() {\n        this.initCytoscape();\n        this.setLoaded();\n    }\n\n    componentDidUpdate() {\n        this.updateCytoscape();\n        this.setLoaded();\n    }\n\n    elementType(element) {\n        return element.group() === 'nodes' ? elementType.NODE : elementType.EDGE;\n    }\n\n    findElement(params) {\n        const elements = this.cy.elements(`#${params.data.id}`);\n        if (elements.length === 1) {\n            return elements.first();\n        } else if (elements.length > 0) {\n            throw new Error('ambiguous id');\n        }\n    }\n\n    handleClick = (event) => {\n        if (event.target === this.cy) {\n            this.callCallback(this.props.onClickOnBackground, {...event.position});\n            return;\n        }\n\n        this.callCallback(this.props.onClickOnElement, this.elementType(event.target), event.target.id());\n    }\n\n    handleFree = (event) => {\n        if (this.hasNodeMoved(event.target)) {\n            this.callCallback(this.props.onMove, event.target.id(), {...event.target.position()});\n        }\n    }\n\n    handleGrab = (event) => {\n        event.target.select();\n    }\n\n    handleSelect = (event) => {\n        this.callCallback(this.props.onSelect, this.elementType(event.target), event.target.id());\n    }\n\n    handleUnselect = (event) => {\n        this.callCallback(this.props.onUnselect, this.elementType(event.target), event.target.id());\n    }\n\n    hasNodeMoved(node) {\n        const loadedPosition = this.loaded.elementsById[node.id()].position;\n        return loadedPosition.x !== node.position().x || loadedPosition.y !== node.position().y;\n    }\n\n    initCytoscape() {\n        const elements = Object.values(this.props.elementsById || {});\n        this.cy = cytoscape({\n            container: this.cyContainerRef.current,\n            elements: cloneDeep(elements),\n            layout: cloneDeep(this.props.layout || {}),\n            maxZoom: this.props.maxZoom,\n            style: cloneDeep(this.props.style || {}),\n        });\n        this.cy.on('free', this.handleFree);\n        this.cy.on('grab', this.handleGrab);\n        this.cy.on('select', this.handleSelect);\n        this.cy.on('unselect', this.handleUnselect);\n        this.cy.on('vclick', this.handleClick);\n\n        this.setState({cy: this.cy});\n    }\n\n    removeElement(params) {\n        const element = this.findElement(params);\n        if (element === undefined) {\n            return;\n        }\n\n        element.remove();\n    }\n\n    render() {\n        return (\n            <div className=\"graph\">\n                <StaticDiv className=\"cytoscape_container\" divRef={this.cyContainerRef}/>\n                <CytoscapeContext.Provider value={this.state.cy}>\n                    {this.props.children}\n                </CytoscapeContext.Provider>\n            </div>\n        );\n    }\n\n    setLoaded() {\n        this.loaded = {\n            elementsById: this.props.elementsById,\n            layout: this.props.layout,\n            style: this.props.style,\n        };\n    }\n\n    updateCytoscape() {\n        this.updateElements();\n        this.updateOptions();\n    }\n\n    updateElement(params) {\n        const prevParams = this.loaded.elementsById[params.data.id];\n        if (prevParams === params) {\n            return;\n        }\n\n        const element = this.findElement(params);\n        if (element === undefined) {\n            return;\n        }\n\n        element.json(cloneDeep(params));\n    }\n\n    updateElements() {\n        const prev = this.loaded.elementsById;\n        const current = this.props.elementsById;\n        if (prev === current) {\n            return;\n        }\n\n        changeDetector.compareByKey({\n            prev,\n            current,\n            onAdd: (params) => (\n                this.findElement(params) ? this.updateElement(params) : this.addElement(params)\n            ),\n            onRemove: (params) => this.removeElement(params),\n            onRemain: (params) => this.updateElement(params),\n        });\n    }\n\n    updateOption(key) {\n        if (this.props[key] === this.loaded[key]) {\n            return;\n        }\n\n        this.cy[key](cloneDeep(this.props[key]));\n    }\n\n    updateOptions() {\n        const optionsToUpdate = ['layout', 'maxZoom', 'style'];\n        optionsToUpdate.map(key => this.updateOption(key));\n    }\n}\n\nexport default Graph;\n","import oneToken from '../images/one-token.svg';\nimport twoTokens from '../images/two-tokens.svg';\nimport threeTokens from '../images/three-tokens.svg';\nimport fourTokens from '../images/four-tokens.svg';\nimport fiveTokens from '../images/five-tokens.svg';\nimport sixTokens from '../images/six-tokens.svg';\nimport sevenTokens from '../images/seven-tokens.svg';\nimport eightTokens from '../images/eight-tokens.svg';\nimport nineTokens from '../images/nine-tokens.svg';\n\nconst primaryColor = '#404040';\nconst secondaryColor = '#BFBFBF';\nconst selectedColor = '#1890ff';\nconst textColor = '#242424';\nconst fontFamily = '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"PingFang SC\", \"Hiragino Sans GB\", \"Microsoft YaHei\", \"Helvetica Neue\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"';\nconst fontSize = 12;\n\nconst generateImageWithNumber = (number) => {\n    const svg = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"80\" height=\"80\" viewBox=\"0 0 80 80\">\n      <text x=\"50%\" y=\"50%\" dy=\".3em\" fill=\"black\" style='font-family: ${fontFamily}; font-size: 20px; text-anchor: middle;'>\n        ${number}\n      </text>\n    </svg>\n  `;\n    return 'data:image/svg+xml;utf8,' + encodeURIComponent(svg);\n}\n\nconst cachedImages = {};\nconst getImageWithNumber = (number) => {\n    if (cachedImages[number] === undefined) {\n        cachedImages[number] = generateImageWithNumber(number);\n    }\n    return cachedImages[number];\n}\n\nconst tokenImages = [\n    oneToken, twoTokens, threeTokens, fourTokens, fiveTokens,\n    sixTokens, sevenTokens, eightTokens, nineTokens,\n];\nconst getBackgroundImageOfPlace = (place) => {\n    const number = place.data('numberOfTokens');\n    if (number === 0) {\n        return [];\n    } else if (number < 10) {\n        return tokenImages[number - 1];\n    }\n\n    return getImageWithNumber(number);\n}\n\nexport default [\n    {\n        selector: '*',\n        style: {\n            'font-size': fontSize,\n            'font-family': fontFamily,\n            'color': textColor,\n        },\n    },\n    {\n        selector: 'node',\n        style: {\n            'border-color': primaryColor,\n            'border-width': 2,\n            'text-valign': 'bottom',\n            'text-halign': 'center',\n            'text-margin-y': 10,\n            'background-color': secondaryColor,\n            'background-fit': 'cover',\n            'label': 'data(label)',\n        }\n    },\n    {\n        selector: 'node.highlighted',\n        style: {\n            'background-color': selectedColor,\n        },\n    },\n    {\n        selector: 'node:selected',\n        style: {\n            'border-color': selectedColor,\n        }\n    },\n    {\n        selector: 'node.place',\n        style: {\n            'height': 80,\n            'width': 80,\n            'background-image': (element) => getBackgroundImageOfPlace(element),\n        },\n    },\n    {\n        selector: 'node.transition',\n        style: {\n            'shape': 'rectangle',\n            'height': 80,\n            'width': 20,\n        },\n    },\n    {\n        selector: 'node.token',\n        style: {\n            'height': 10,\n            'width': 10,\n            'background-color': 'black',\n            'border-width': 0,\n        },\n    },\n    {\n        selector: 'edge',\n        style: {\n            'width': 2,\n            'target-arrow-shape': 'triangle',\n            'line-color': primaryColor,\n            'target-arrow-color': primaryColor,\n            'curve-style': 'bezier',\n            'label': 'data(weight)',\n            'text-margin-y': 14,\n        },\n    },\n    {\n        selector: 'edge:selected',\n        style: {\n            'line-color': selectedColor,\n            'target-arrow-color': selectedColor,\n        },\n    },\n    {\n        selector: '.eh-ghost-edge.eh-preview-active',\n        style: {\n            'opacity': 0\n        },\n    },\n];\n","import React, {PureComponent} from 'react';\nimport {getIncomingEdges} from '../selectors/petriNet';\nimport ElementCfgFactory from '../utils/ElementCfgFactory';\nimport PetriNetToElementCfgsMapper from '../utils/PetriNetToElementCfgsMapper';\nimport EdgeHandles from './EdgeHandles';\nimport Graph from './Graph';\nimport petriNetGraphStyle from './PetriNetGraphStyle';\n\nclass PetriNetGraph extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.elementCfgFactory = new ElementCfgFactory();\n        this.edgeParams = this.edgeParams.bind(this);\n        this.shouldAddEdge = this.shouldAddEdge.bind(this);\n        this.state = {\n            layout: {\n                name: 'preset',\n            },\n        };\n    }\n\n    edgeParams(from, to) {\n        return this.elementCfgFactory.edgeCfg({\n            id: `${from}_${to}`,\n            source: from,\n            target: to,\n        });\n    }\n\n    elementsById() {\n        return new PetriNetToElementCfgsMapper(\n            this.props.petriNet,\n            this.elementCfgFactory,\n            {\n                selectedId: this.props.selectedId,\n                highlightedIds: this.props.highlightedIds,\n                locked: this.props.locked,\n            }\n        ).map();\n    }\n\n    shouldAddEdge(from, to) {\n        if (from === to) {\n            return false;\n        }\n\n        const petriNet = this.props.petriNet;\n        const fromNode = petriNet.nodesById[from];\n        const toNode = petriNet.nodesById[to];\n        if (fromNode === undefined || toNode === undefined || fromNode.type === toNode.type) {\n            return false;\n        }\n\n        const incomingNodeIds = getIncomingEdges(petriNet, toNode.id).map(edge => edge.from);\n        return incomingNodeIds.indexOf(fromNode.id) === -1;\n    }\n\n    render = () => {\n        return (\n            <Graph style={petriNetGraphStyle}\n                   layout={this.state.layout}\n                   elementsById={this.elementsById()}\n                   {...this.props} >\n                {this.renderEdgeHandles()}\n                {this.props.children}\n            </Graph>\n        );\n    }\n\n    renderEdgeHandles() {\n        if (this.props.locked === true) {\n            return;\n        }\n\n        return <EdgeHandles onAddEdge={this.props.onAddEdge}\n                            shouldAddEdge={this.shouldAddEdge}\n                            snap={true}\n                            edgeParams={this.edgeParams}/>\n    }\n}\n\nexport default PetriNetGraph;\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport uuidv4 from 'uuid/v4';\nimport * as elementType from '../constants/elementTypes';\nimport * as nodeType from '../constants/nodeTypes';\nimport EditorToolbar from './EditorToolbar';\nimport ElementForm from './ElementForm';\nimport GraphArea from './GraphArea';\nimport PetriNetGraph from './PetriNetGraph';\nimport './css/Editor.css';\n\nconst {Sider} = Layout;\n\nclass Editor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeNodeType: nodeType.TRANSITION,\n            selected: {},\n        };\n        this.handleAddEdge = this.handleAddEdge.bind(this);\n        this.handleClickOnBackground = this.handleClickOnBackground.bind(this);\n        this.handleNodeTypeChange = this.handleNodeTypeChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleUnselect = this.handleUnselect.bind(this);\n    }\n\n    getSelectedElement() {\n        const id = this.state.selected.id;\n        switch (this.state.selected.type) {\n            case elementType.EDGE:\n                return this.props.petriNet.edgesById[id];\n            case elementType.NODE:\n                return this.props.petriNet.nodesById[id];\n            default:\n                return;\n        }\n    }\n\n    handleAddEdge(from, to) {\n        this.props.onAddEdge(from, to);\n        this.setState({selected: {type: elementType.EDGE, id: `${from}_${to}`}});\n    }\n\n    handleClickOnBackground(position) {\n        const nodeId = uuidv4();\n        this.props.onAddNode(nodeId, this.state.activeNodeType, position);\n        this.setState({selected: {type: elementType.NODE, id: nodeId}});\n    }\n\n    handleSelect(type, id) {\n        this.setState({selected: {type, id}});\n    }\n\n    handleUnselect(id) {\n        if (id !== this.state.selected.id) {\n            return;\n        }\n        this.setState({selected: {}});\n    }\n\n    handleNodeTypeChange(nodeType) {\n        this.setState({activeNodeType: nodeType});\n    }\n\n    render() {\n        return (\n            <>\n                <EditorToolbar activeNodeType={this.state.activeNodeType} onNodeTypeChange={this.handleNodeTypeChange}/>\n                <Layout>\n                    <GraphArea>\n                        <PetriNetGraph\n                            petriNet={this.props.petriNet}\n                            selectedId={this.state.selected.id}\n                            maxZoom={1}\n                            onAddEdge={this.handleAddEdge}\n                            onClickOnBackground={this.handleClickOnBackground}\n                            onMove={this.props.onMove}\n                            onSelect={this.handleSelect}\n                            onUnselect={this.handleUnselect}/>\n                    </GraphArea>\n                    {this.renderSidebar()}\n                </Layout>\n            </>\n        );\n    }\n\n    renderSidebar() {\n        const element = this.getSelectedElement();\n        if (element === undefined) {\n            return;\n        }\n\n        return <Sider className=\"editor__sidebar\" width={260}>\n            <ElementForm element={element} elementType={this.state.selected.type}/>\n        </Sider>\n    }\n}\n\nexport default Editor;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {addEdge, addNode, moveNode} from '../actions';\nimport {getCurrentPetriNet, getCurrentPetriNetId} from '../selectors';\nimport Editor from '../components/Editor';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: getCurrentPetriNet(state, ownProps),\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onAddEdge: (from, to) => dispatch(\n        addEdge(getCurrentPetriNetId(ownProps), from, to)\n    ),\n    onAddNode: (nodeId, nodeType, position) => dispatch(\n        addNode(getCurrentPetriNetId(ownProps), nodeId, nodeType, position)\n    ),\n    onMove: (id, position) => dispatch(\n        moveNode(getCurrentPetriNetId(ownProps), id, position)\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Editor));\n","class TokenFlowAnimation {\n    constructor(edgeElement) {\n        this.cytoscape = edgeElement.cy();\n        this.edgeElement = edgeElement;\n    }\n\n    async play() {\n        const token = this.addToken();\n        await this.animateToken(token)\n        this.removeToken(token);\n    }\n\n    addToken() {\n        return this.cytoscape.add({\n            group: \"nodes\",\n            classes: \"token\",\n            position: this.edgeElement.sourceEndpoint(),\n        });\n    }\n\n    animateToken(token) {\n        throw new Error('Not implemented');\n    }\n\n    removeToken(token) {\n        token.remove();\n    }\n}\n\nexport default TokenFlowAnimation;\n","export const valueAt = (p0, p1, p2, t) => (\n    (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2\n);\n\nexport const pointAt = (p0, p1, p2, t) => ({\n    x: valueAt(p0.x, p1.x, p2.x, t),\n    y: valueAt(p0.y, p1.y, p2.y, t),\n});\n\nexport default {\n    valueAt,\n    pointAt,\n};\n","import TokenFlowAnimation from './TokenFlowAnimation';\nimport bezierCurve from './../utils/bezierCurve';\n\nclass BezierCurveTokenFlowAnimation extends TokenFlowAnimation {\n    pointOnBezierCurve(t) {\n        return bezierCurve.pointAt(\n            this.edgeElement.sourceEndpoint(),\n            this.edgeElement.controlPoints()[0],\n            this.edgeElement.targetEndpoint(),\n            t\n        );\n    }\n\n    animateToken(token) {\n        let numberOfSteps = 30;\n        let durationOfStep = 500 / numberOfSteps;\n        let delta = 1.0 / numberOfSteps;\n        for (var i = 0; i < (numberOfSteps - 1); i++) {\n            let t = delta * (i + 1);\n            token.animate({\n                position: this.pointOnBezierCurve(t),\n                duration: durationOfStep,\n            });\n        }\n\n        var animation = token.animation({\n            position: this.edgeElement.targetEndpoint(),\n            duration: durationOfStep,\n            queue: true,\n        });\n        return animation.play().promise();\n    }\n}\n\nexport default BezierCurveTokenFlowAnimation;\n","import TokenFlowAnimation from './TokenFlowAnimation';\n\nclass LinearTokenFlowAnimation extends TokenFlowAnimation {\n    animateToken(token) {\n        var animation = token.animation({\n            position: this.edgeElement.targetEndpoint(),\n            duration: 500,\n            queue: true,\n        });\n        return animation.play().promise();\n    }\n}\n\nexport default LinearTokenFlowAnimation;\n","import BezierCurveTokenFlowAnimation from './BezierCurveTokenFlowAnimation';\nimport LinearTokenFlowAnimation from './LinearTokenFlowAnimation';\n\nconst isBezierCurve = (edgeElement) => (\n    edgeElement.controlPoints() !== undefined\n)\n\nconst animationFor = (edgeElement) => {\n    if (isBezierCurve(edgeElement)) {\n        return new BezierCurveTokenFlowAnimation(edgeElement);\n    }\n    return new LinearTokenFlowAnimation(edgeElement);\n}\n\nexport default {animationFor}\n","import TokenFlowAnimationFactory from './TokenFlowAnimationFactory';\n\nclass TransitionAnimation {\n    constructor(transitionElement) {\n        this.canceled = false;\n        this.cytoscape = transitionElement.cy();\n        this.transitionElement = transitionElement;\n    }\n\n    async animateIncomingEdge(edgeElement) {\n        const source = edgeElement.source();\n        const numberOfTokens = source.data('numberOfTokens') - edgeElement.data('weight');\n        source.data('numberOfTokens', numberOfTokens);\n\n        await this.animateTokenFlowOfEdge(edgeElement);\n    }\n\n    animateIncomingEdges() {\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const incomingEdges = this.transitionElement.incomers('edge');\n        const promises = incomingEdges.map(\n            this.animateIncomingEdge.bind(this)\n        );\n        return Promise.all(promises);\n    }\n\n    async animateOutgoingEdge(edgeElement) {\n        await this.animateTokenFlowOfEdge(edgeElement);\n\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const target = edgeElement.target();\n        const numberOfTokens = target.data('numberOfTokens') + edgeElement.data('weight');\n        target.data('numberOfTokens', numberOfTokens);\n    }\n\n    animateOutgoingEdges() {\n        if (this.canceled === true) {\n            return Promise.resolve();\n        }\n\n        const outgoingEdges = this.transitionElement.outgoers('edge');\n        const promises = outgoingEdges.map(\n            this.animateOutgoingEdge.bind(this)\n        );\n        return Promise.all(promises);\n    }\n\n    animateTokenFlowOfEdge(edgeElement) {\n        return TokenFlowAnimationFactory.animationFor(edgeElement).play();\n    }\n\n    cancel() {\n        this.canceled = true;\n    }\n\n    async play() {\n        await this.animateIncomingEdges();\n        await this.animateOutgoingEdges();\n    }\n}\n\nexport default TransitionAnimation;\n","import {PureComponent} from 'react';\nimport CytoscapeContext from '../contexts/CytoscapeContext';\n\nclass GraphAnimation extends PureComponent {\n    static contextType = CytoscapeContext;\n\n    async play() {\n        const element = this.context.elements(`#${this.props.elementId}`).first();\n        this.animation = new this.props.animation(element);\n\n        await this.animation.play();\n        if (this.props.onEnd !== undefined) {\n            this.props.onEnd();\n        }\n    }\n\n    cancel() {\n        this.animation.cancel();\n    }\n\n    componentDidMount() {\n        this.play();\n    }\n\n    componentWillUnmount() {\n        this.cancel();\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default GraphAnimation;\n","import React, {Component} from 'react';\nimport {Button} from 'antd';\nimport Toolbar from './Toolbar';\nimport './css/HorizontalToolbar.css';\n\nclass SimulatorToolbar extends Component {\n    render() {\n        return (\n            <Toolbar backgroundColor=\"#008B27\">\n                <Button id=\"run\" icon=\"play-circle\" onClick={this.props.onRun}>Run</Button>\n                <Button id=\"runStep\" icon=\"play-circle\" className=\"btn-margin\" onClick={this.props.onRunStep}>Run step</Button>\n                <Button id=\"reset\" icon=\"reload\" className=\"btn-margin\" onClick={this.props.onReset}>Reset</Button>\n            </Toolbar>\n        )\n    }\n}\n\nexport default SimulatorToolbar;\n","import React, {Component} from 'react';\nimport TransitionAnimation from '../animations/TransitionAnimation';\nimport {getActiveTransitions} from '../selectors/petriNet';\nimport GraphArea from './GraphArea';\nimport GraphAnimation from './GraphAnimation';\nimport PetriNetGraph from './PetriNetGraph';\nimport SimulatorToolbar from './SimulatorToolbar'\n\nclass Simulator extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleAnimationEnd = this.handleAnimationEnd.bind(this);\n        this.handleClickOnElement = this.handleClickOnElement.bind(this);\n        this.state = {traceIdx: 0, pos: 0};\n    }\n\n    activeTransitionIds() {\n        if (this.props.petriNet === undefined) {\n            return [];\n        }\n\n        return getActiveTransitions(this.props.petriNet).map(transition => transition.id);\n    }\n\n    componentWillUnmount() {\n        this.props.onReset();\n    }\n\n    handleAnimationEnd() {\n        this.props.onFireTransition(this.state.selected);\n        this.setState({selected: undefined});\n    }\n\n    handleClickOnElement(type, id) {\n        if (!this.isTransitionActive(id) || this.state.selected !== undefined) {\n            return;\n        }\n        this.setState({selected: id});\n    }\n\n    highlightedIds() {\n        return this.state.selected ? [] : this.activeTransitionIds();\n    }\n\n    isTransitionActive(id) {\n        return this.activeTransitionIds().indexOf(id) !== -1;\n    }\n\n    async wait() {\n        const sleep = ms => new Promise(r => setTimeout(r, ms));\n        await sleep(1500);\n    }\n\n    isFinished = () => {\n        const traces = this.props.petriNet.traces;\n        const traceIdx = this.state.traceIdx;\n        return traces.length <= traceIdx;\n    }\n\n    updateState = () => {\n        const traceIdx = this.state.traceIdx;\n        const currentTrace = this.props.petriNet.traces[traceIdx];\n        const pos = this.state.pos;\n\n        if (currentTrace.trace.length === pos + 1) {\n            this.props.onReset();\n            currentTrace.active = false;\n            if (traceIdx + 1 < this.props.petriNet.traces.length) {\n                this.props.petriNet.traces[traceIdx + 1].active = true;\n            }\n            this.setState({traceIdx: traceIdx + 1, pos: 0});\n        } else {\n            this.setState({pos: pos + 1});\n        }\n    }\n\n    onRunStep = () => {\n        console.log(this.state.traceIdx, \"pos: \", this.state.pos);\n        if (this.isFinished()) {\n            return;\n        }\n\n        const petriNet = this.props.petriNet;\n        const trace = petriNet.traces[this.state.traceIdx];\n        trace.active = true;\n        const pos = this.state.pos;\n        const activeTransitions = getActiveTransitions(petriNet)\n            .filter((t) => t.label === trace.trace[pos]);\n\n        if (activeTransitions.length === 1) {\n            this.handleClickOnElement(null, activeTransitions[0].id);\n            this.updateState();\n        }\n    }\n\n    onRun = async () => {\n        while (!this.isFinished()) {\n            this.onRunStep();\n            await this.wait();\n        }\n    }\n\n    onReset = () => {\n        this.setState({traceIdx: 0, pos: 0});\n        this.props.petriNet.traces[0].active = true;\n        this.props.onReset();\n    }\n\n    render() {\n        return (\n            <>\n                <SimulatorToolbar onRun={this.onRun} onRunStep={this.onRunStep} onReset={this.onReset}/>\n                <GraphArea>\n                    <PetriNetGraph petriNet={this.props.petriNet}\n                                   locked={true}\n                                   maxZoom={1}\n                                   highlightedIds={this.highlightedIds()}\n                                   onClickOnElement={this.handleClickOnElement}>\n                        {this.renderAnimation()}\n                    </PetriNetGraph>\n                </GraphArea>\n            </>\n        );\n    }\n\n    renderAnimation() {\n        if (this.state.selected === undefined) {\n            return null;\n        }\n\n        return <GraphAnimation elementId={this.state.selected}\n                               animation={TransitionAnimation}\n                               onEnd={this.handleAnimationEnd}/>\n    }\n}\n\nexport default Simulator;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {fireTransition, resetMarkings} from '../actions';\nimport {getCurrentPetriNetId} from '../selectors';\nimport Simulator from '../components/Simulator';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: state.petriNetsById[getCurrentPetriNetId(ownProps)],\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onFireTransition: (transitionId) => dispatch(\n        fireTransition(getCurrentPetriNetId(ownProps), transitionId)\n    ),\n    onReset: () => dispatch(\n        resetMarkings(getCurrentPetriNetId(ownProps))\n    ),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Simulator));\n","import React, {Component} from 'react';\nimport {Button, Input} from 'antd';\nimport './css/CreateBox.css';\n\nclass CreateBox extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {value: ''}\n    }\n\n    handleClickOnPlus = () => {\n        if (this.state.value !== '') {\n            this.props.onCreate(this.state.value);\n            this.setState({value: ''})\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n    }\n\n    render() {\n        let button = <Button type=\"default\" icon=\"plus\" onClick={this.handleClickOnPlus}/>\n        return (\n            <div className=\"create_box\">\n                <Input placeholder=\"Name\" value={this.state.value} onChange={this.handleChange} suffix={button}/>\n            </div>\n        )\n    }\n}\n\nexport default CreateBox;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router';\nimport {addPetriNet} from '../actions';\nimport CreateBox from '../components/CreateBox';\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    onCreate: name => {\n        let action = addPetriNet(name);\n        dispatch(action);\n        ownProps.history.push('/' + action.petriNetId);\n    }\n});\n\nexport default withRouter(connect(\n    null,\n    mapDispatchToProps\n)(CreateBox));\n","import React, {Component} from 'react';\nimport {Menu} from 'antd';\n\nclass PetriNetMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(item) {\n        this.props.onSelect(item.key);\n    }\n\n    render() {\n        let petriNets = this.props.petriNets;\n        let selectedId = this.props.selectedId;\n        return (\n            <Menu theme=\"dark\" selectedKeys={['' + selectedId]} onClick={this.handleSelect}>\n                {petriNets.map(petriNet =>\n                    <Menu.Item key={petriNet.id}>{petriNet.name}</Menu.Item>\n                )}\n            </Menu>\n        );\n    }\n}\n\nexport default PetriNetMenu;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport PetriNetMenu from '../components/PetriNetMenu';\nimport {getPetriNets} from '../selectors';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNets: getPetriNets(state),\n    selectedId: ownProps.match.params.id,\n});\n\nconst mapDispatchToProps = (_, ownProps) => ({\n    onSelect: id => ownProps.history.push('/' + id),\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PetriNetMenu));\n","import React from \"react\";\nimport {Button} from \"antd\";\nimport './css/TraceItem.css';\n\nclass TraceItem extends React.Component {\n\n    state = {\n        number: \"1\"\n    };\n\n    onNumberChange = (event) => {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[1-9]?[0-9]{0,9}$\");\n\n        if (regexp.test(newValue)) {\n            this.setState({number: newValue});\n            this.props.onNumberChange(newValue);\n        }\n    };\n\n    onLostFocus = () => {\n        if (this.state.number === '') {\n            this.setState({number: '1'});\n        }\n    }\n\n    render() {\n        const {trace = 'abcd', onDeletion} = this.props;\n\n        return (\n            <div>\n                <span>\n                    {trace}\n                </span>\n                <div className=\"trace-item parent\">\n                    <Button type=\"danger\" icon=\"delete\" className=\"inline-right\" onClick={onDeletion}/>\n\n                    <input name=\"numberInput\" type='text' className=\"inline-right trace-item-number form-control\"\n                           placeholder='1' required\n                           onChange={this.onNumberChange}\n                           onBlur={this.onLostFocus}\n                           value={this.state.number}/>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TraceItem;\n","import React, {Component} from 'react';\nimport TraceItem from \"./TraceItem\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nclass CaseTracesList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.props.petriNet.traces = this.state.traces;\n    }\n\n    traceId = 0;\n\n    createTrace = (traceStr) => {\n        return {\n            key: this.traceId++,\n            trace: traceStr,\n            number: 1,\n            active: false,\n        };\n    }\n\n    state = {\n        traces: [\n            //this.createTrace('abcdg'),\n            //this.createTrace('abdcg'),\n            //this.createTrace('abcg')\n        ],\n        text : ''\n    };\n\n    addItem = (traceStr) => {\n        const res = [...this.state.traces, this.createTrace(traceStr)];\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    deleteItem = (id) => {\n        const traces = this.state.traces;\n        const index = traces.findIndex((el) => el.key === id);\n        const res = [...traces.slice(0, index), ...traces.slice(index + 1)];\n\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    changeNumber = (id, number) => {\n        const traces = this.state.traces;\n        const index = traces.findIndex((el) => el.key === id);\n        const targetTrace = traces[index]\n        targetTrace.number = Number(number);\n        const res = [...traces.slice(0, index), targetTrace, ...traces.slice(index + 1)];\n\n        this.setState({traces: res});\n        this.props.petriNet.traces = res;\n    }\n\n    onLabelChange = (event) => {\n        const newValue = event.target.value;\n        const regexp = new RegExp(\"^[a-zA-Z]{0,15}$\");\n\n        if (regexp.test(newValue)) {\n            this.setState({ text: event.target.value });\n        }\n    };\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        const length = this.state.text.length;\n\n        if (length === 0) {\n            return;\n        } else if (length > 15) {\n            Notify.failure(\"Case trace is too long\");\n            return;\n        }\n\n        this.addItem(this.state.text);\n        this.setState({text: '' });\n    };\n\n    render() {\n        const items = this.state.traces.map((item) => {\n            const { key: id, active, ...other } = item;\n            const color = active ? \"#008B27\" : \"whitesmoke\";\n\n            return (\n                <li key={id} className=\"list-group-item\" style={{background: color}}>\n                    <TraceItem { ...other }\n                               onNumberChange={(number) => this.changeNumber(id, number)}\n                               onDeletion={() => this.deleteItem(id)}/>\n                </li>\n            );\n        });\n\n        return (\n            <div>\n                <h4 style={{color: \"whitesmoke\", marginTop: \"15px\", marginBottom: \"21px\", marginLeft: \"38px\"}}>\n                    Case traces\n                </h4>\n                <form className='d-flex' onSubmit={this.onSubmit}>\n                    <input type='text' className='form-control'\n                           style={{height: \"48px\"}}\n                           placeholder='Enter trace' onChange={this.onLabelChange}\n                           pattern='[a-zA-Z]*' value={this.state.text}/>\n\n                    <button className=\"btn btn-light\" style={{height: \"48px\"}}>\n                        Add\n                    </button>\n                </form>\n                <ul className=\"list-group\">\n                    {items}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default CaseTracesList;\n","import {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport CaseTracesList from '../components/CaseTracesList';\nimport {getCurrentPetriNet} from '../selectors';\n\nconst mapStateToProps = (state, ownProps) => ({\n    petriNet: getCurrentPetriNet(state, ownProps)\n});\n\nconst mapDispatchToProps = (_, ownProps) => ({\n});\n\nexport default withRouter(connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CaseTracesList));","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport CreateBoxContainer from '../containers/CreateBoxContainer';\nimport PetriNetMenuContainer from '../containers/PetriNetMenuContainer';\nimport CaseTracesListContainer from \"../containers/CaseTracesListContainer\";\n\nconst {Sider} = Layout;\n\nclass Sidebar extends Component {\n    render() {\n        // <CreateBoxContainer/>\n        // <PetriNetMenuContainer/>\n        return (\n            <Sider>\n                <CaseTracesListContainer/>\n            </Sider>\n        );\n    }\n}\n\nexport default Sidebar;\n","import React, {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\nimport {Icon, Menu} from 'antd';\nimport './css/ModeMenu.css';\n\nclass ModeMenu extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(item) {\n        this.props.history.push(`${item.key}`);\n    }\n\n    render() {\n        return (\n            <Menu className=\"mode_menu\"\n                  mode=\"horizontal\"\n                  onClick={this.handleSelect}\n                  selectedKeys={[this.selectedMode()]}\n                  theme=\"dark\">\n                <Menu.Item className=\"mode_menu__process_model\" key=\"edit\">\n                    <Icon theme=\"outlined\" type=\"edit\"/>Process model\n                </Menu.Item>\n                <Menu.Item className=\"mode_menu__run_algorithm\" key=\"simulate\">\n                    <Icon theme=\"outlined\" type=\"play-circle\"/>Run algorithm\n                </Menu.Item>\n            </Menu>\n        );\n    }\n\n    selectedMode() {\n        return this.props.match.params.mode;\n    }\n}\n\nexport default withRouter(ModeMenu);\n","import React, {Component} from 'react';\nimport {Layout} from 'antd';\nimport ModeMenu from './ModeMenu';\nimport './css/Topbar.css';\n\nconst {Header} = Layout;\n\nclass Topbar extends Component {\n    render() {\n        return (\n            <Header className=\"topbar\">\n                <ModeMenu/>\n            </Header>\n        );\n    }\n}\n\nexport default Topbar;\n","import React, {Component} from 'react';\nimport {Route} from 'react-router-dom';\nimport {Layout} from 'antd';\nimport EditorContainer from '../containers/EditorContainer';\nimport SimulatorContainer from '../containers/SimulatorContainer';\nimport Sidebar from './Sidebar'\nimport Topbar from './Topbar';\nimport './css/App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Layout className=\"outer_layout\">\n                    <Sidebar/>\n                    <Layout>\n                        <Topbar/>\n                        <Route path=\"/:id/edit\" component={EditorContainer}/>\n                        <Route path=\"/:id/simulate\" component={SimulatorContainer}/>\n                    </Layout>\n                </Layout>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import {ADD_PETRI_NET} from '../actions';\n\nconst initialState = []\n\nconst petriNets = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_PETRI_NET:\n            return [\n                ...state,\n                action.petriNetId,\n            ];\n        default:\n            return state;\n    }\n};\n\nexport default petriNets;","import {ADD_EDGE, SET_WEIGHT, REMOVE_EDGE, REMOVE_NODE} from '../actions';\n\nconst edgesById = (state = {}, action) => {\n    switch (action.type) {\n        case ADD_EDGE:\n            return {\n                ...state,\n                [action.edgeId]: {\n                    id: action.edgeId,\n                    from: action.from,\n                    to: action.to,\n                    weight: 1,\n                },\n            };\n        case SET_WEIGHT:\n            return {\n                ...state,\n                [action.edgeId]: {\n                    ...state[action.edgeId],\n                    weight: action.weight,\n                },\n            };\n        case REMOVE_EDGE: {\n            const next = {...state};\n            delete (next[action.edgeId]);\n            return next;\n        }\n        case REMOVE_NODE: {\n            const next = {...state};\n            Object.values(state).forEach(edge => {\n                if (edge.from === action.nodeId || edge.to === action.nodeId) {\n                    delete (next[edge.id]);\n                }\n            });\n            return next;\n        }\n        default:\n            return state;\n    }\n};\n\nexport default edgesById;\n","import {\n    ADD_NODE, MOVE_NODE, REMOVE_NODE,\n    SET_LABEL, SET_CAPACITY_LIMIT, REMOVE_CAPACITY_LIMIT,\n} from '../actions';\n\nconst nodesById = (state = {}, action) => {\n    switch (action.type) {\n        case ADD_NODE:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    id: action.nodeId,\n                    type: action.nodeType,\n                    position: {\n                        ...action.position,\n                    },\n                },\n            };\n        case MOVE_NODE:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    ...state[action.nodeId],\n                    position: {\n                        ...action.position,\n                    },\n                },\n            };\n        case REMOVE_NODE: {\n            let next = {...state};\n            delete (next[action.nodeId]);\n            return next;\n        }\n        case SET_LABEL:\n            return {\n                ...state,\n                [action.nodeId]: {\n                    ...state[action.nodeId],\n                    label: action.label,\n                },\n            };\n        case SET_CAPACITY_LIMIT:\n            return {\n                ...state,\n                [action.placeId]: {\n                    ...state[action.placeId],\n                    capacityLimit: action.capacityLimit,\n                },\n            };\n        case REMOVE_CAPACITY_LIMIT: {\n            let next = {...state};\n            delete (next[action.placeId].capacityLimit);\n            return next;\n        }\n        default:\n            return state;\n    }\n};\n\nexport default nodesById;\n","import {\n    ADD_NODE, REMOVE_NODE, SET_CAPACITY_LIMIT,\n    SET_INITIAL_NUMBER_OF_TOKENS, RESET_MARKINGS\n} from '../actions';\n\nconst markings = (state = [{}], action) => {\n    switch (action.type) {\n        case ADD_NODE:\n            return state.map(marking => ({\n                ...marking,\n                [action.nodeId]: 0,\n            }));\n        case REMOVE_NODE:\n            return state.map(marking => {\n                let mapped = {...marking};\n                delete (mapped[action.nodeId]);\n                return mapped;\n            });\n        case SET_CAPACITY_LIMIT:\n            return state.map(marking => {\n                if (marking[action.placeId] <= action.capacityLimit) {\n                    return marking;\n                }\n                return {\n                    ...marking,\n                    [action.placeId]: action.capacityLimit,\n                };\n            });\n        case SET_INITIAL_NUMBER_OF_TOKENS: {\n            let next = [...state];\n            next[0] = {\n                ...state[0],\n                [action.placeId]: action.numberOfTokens,\n            };\n            return next;\n        }\n        case RESET_MARKINGS:\n            return [\n                state[0],\n            ]\n        default:\n            return state;\n    }\n};\n\nexport default markings;\n","import edgesById from './edgesById';\nimport nodesById from './nodesById';\nimport markings from './markings';\nimport {FIRE_TRANSITION} from '../actions';\nimport {getIncomingEdges, getOutgoingEdges} from '../selectors/petriNet';\n\nconst petriNet = (state, action) => {\n    switch (action.type) {\n        case FIRE_TRANSITION: {\n            let nextMarking = {...state.markings[state.markings.length - 1]};\n\n            const incoming = getIncomingEdges(state, action.transitionId);\n            incoming.forEach(edge => nextMarking[edge.from] -= edge.weight);\n\n            const outgoing = getOutgoingEdges(state, action.transitionId);\n            outgoing.forEach(edge => nextMarking[edge.to] += edge.weight);\n\n            return {\n                ...state,\n                markings: [\n                    ...state.markings,\n                    nextMarking,\n                ]\n            }\n        }\n        default: {\n            let next = {\n                ...state,\n                edgesById: edgesById(state['edgesById'], action),\n                nodesById: nodesById(state['nodesById'], action),\n                markings: markings(state['markings'], action),\n            };\n            let unchanged =\n                next.edgesById === state.edgesById &&\n                next.nodesById === state.nodesById &&\n                next.markings === state.markings;\n            if (unchanged) {\n                return state;\n            }\n            return next;\n        }\n    }\n};\n\nexport default petriNet;\n","import petriNet from './petriNet';\nimport {ADD_PETRI_NET} from '../actions';\n\nconst initialState = {};\n\nconst petriNetsByIds = (state = initialState, action) => {\n    switch (action.type) {\n        case ADD_PETRI_NET:\n            return {\n                ...state,\n                [action.petriNetId]: {\n                    id: action.petriNetId,\n                    name: action.name,\n                    edgesById: {},\n                    nodesById: {},\n                    markings: [{}],\n                },\n            };\n        default: {\n            if (action.petriNetId === undefined) {\n                return state;\n            }\n\n            let petriNetState = state[action.petriNetId];\n            let reducedState = petriNet(state[action.petriNetId], action);\n            if (petriNetState === reducedState) {\n                return state;\n            }\n\n            return {\n                ...state,\n                [action.petriNetId]: reducedState,\n            };\n        }\n    }\n};\n\nexport default petriNetsByIds;\n","import {combineReducers} from 'redux';\nimport petriNets from './petriNets';\nimport petriNetsById from './petriNetsById';\n\nexport default combineReducers({\n    petriNets,\n    petriNetsById,\n});\n","const examplePetriNetId = '87b6487b-5781-477e-8398-e2d8c36000be';\nexport default {\n    petriNets: [examplePetriNetId],\n    petriNetsById: {\n        [examplePetriNetId]: {\n            id: examplePetriNetId,\n            name: 'Sample process model',\n            edgesById: {},\n            nodesById: {},\n            markings: [{}],\n            traces: [],\n        },\n    },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Redirect, BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport App from './components/App';\nimport rootReducer from './reducers';\nimport inititalState from './initialState';\nimport './index.css';\n\nconst store = createStore(rootReducer, inititalState);\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <Switch>\n                <Route path=\"/:id/:mode(edit|simulate)\" component={App}/>\n                <Redirect from=\"/:id\" to=\"/:id/edit\"/>\n                <Redirect to={`/${store.getState().petriNets[0]}/edit`}/>\n            </Switch>\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}